
foto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005584  08005584  00006584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005664  08005664  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005664  08005664  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005664  08005664  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800566c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08005678  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08005678  00007170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eead  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002959  00000000  00000000  00015ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00018840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000beb  00000000  00000000  000197d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9cc  00000000  00000000  0001a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001322e  00000000  00000000  00037d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfc3f  00000000  00000000  0004afbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010abfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d4  00000000  00000000  0010ac40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010e314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800556c 	.word	0x0800556c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800556c 	.word	0x0800556c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <init_fan>:
 uint32_t *INC;
 uint32_t *IND;


void init_fan(uint32_t* motor_PWM_INA, uint32_t* motor_PWM_INB, uint32_t* motor_PWM_INC, uint32_t* motor_PWM_IND)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
 80003fc:	603b      	str	r3, [r7, #0]
	INA = motor_PWM_INA;
 80003fe:	4b10      	ldr	r3, [pc, #64]	@ (8000440 <init_fan+0x50>)
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	601a      	str	r2, [r3, #0]
	INB = motor_PWM_INB;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <init_fan+0x54>)
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	601a      	str	r2, [r3, #0]
	INC = motor_PWM_INC;
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <init_fan+0x58>)
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]
	IND = motor_PWM_IND;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <init_fan+0x5c>)
 8000412:	683a      	ldr	r2, [r7, #0]
 8000414:	601a      	str	r2, [r3, #0]
	*INA = 0;
 8000416:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <init_fan+0x50>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	*INB = 0;
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <init_fan+0x54>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
	*INC = 0;
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <init_fan+0x58>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
	*IND = 0;
 800042e:	4b07      	ldr	r3, [pc, #28]	@ (800044c <init_fan+0x5c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	20000028 	.word	0x20000028
 8000444:	2000002c 	.word	0x2000002c
 8000448:	20000030 	.word	0x20000030
 800044c:	20000034 	.word	0x20000034

08000450 <set_fan_speed>:

// speed has to be integer from -1000 to 1000
void set_fan_speed(int16_t speed){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	0002      	movs	r2, r0
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	801a      	strh	r2, [r3, #0]
	if (0 <= speed && speed <= 1000){
 800045c:	1dbb      	adds	r3, r7, #6
 800045e:	2200      	movs	r2, #0
 8000460:	5e9b      	ldrsh	r3, [r3, r2]
 8000462:	2b00      	cmp	r3, #0
 8000464:	db11      	blt.n	800048a <set_fan_speed+0x3a>
 8000466:	1dbb      	adds	r3, r7, #6
 8000468:	2200      	movs	r2, #0
 800046a:	5e9a      	ldrsh	r2, [r3, r2]
 800046c:	23fa      	movs	r3, #250	@ 0xfa
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	429a      	cmp	r2, r3
 8000472:	dc0a      	bgt.n	800048a <set_fan_speed+0x3a>
		*INB = 0;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <set_fan_speed+0x70>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
		*INA = speed;
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <set_fan_speed+0x74>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	1dba      	adds	r2, r7, #6
 8000482:	2100      	movs	r1, #0
 8000484:	5e52      	ldrsh	r2, [r2, r1]
 8000486:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed && speed < 0){
		*INA = 0;
		*INB = -1*speed;
	}
}
 8000488:	e015      	b.n	80004b6 <set_fan_speed+0x66>
	}else if (-1000 <= speed && speed < 0){
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	2200      	movs	r2, #0
 800048e:	5e9b      	ldrsh	r3, [r3, r2]
 8000490:	4a0d      	ldr	r2, [pc, #52]	@ (80004c8 <set_fan_speed+0x78>)
 8000492:	4293      	cmp	r3, r2
 8000494:	db0f      	blt.n	80004b6 <set_fan_speed+0x66>
 8000496:	1dbb      	adds	r3, r7, #6
 8000498:	2200      	movs	r2, #0
 800049a:	5e9b      	ldrsh	r3, [r3, r2]
 800049c:	2b00      	cmp	r3, #0
 800049e:	da0a      	bge.n	80004b6 <set_fan_speed+0x66>
		*INA = 0;
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <set_fan_speed+0x74>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		*INB = -1*speed;
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	2200      	movs	r2, #0
 80004ac:	5e9b      	ldrsh	r3, [r3, r2]
 80004ae:	425a      	negs	r2, r3
 80004b0:	4b03      	ldr	r3, [pc, #12]	@ (80004c0 <set_fan_speed+0x70>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	601a      	str	r2, [r3, #0]
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	20000028 	.word	0x20000028
 80004c8:	fffffc18 	.word	0xfffffc18

080004cc <set_fan_speed2>:

void set_fan_speed2(int16_t speed2){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0002      	movs	r2, r0
 80004d4:	1dbb      	adds	r3, r7, #6
 80004d6:	801a      	strh	r2, [r3, #0]
	if (0 <= speed2 && speed2 <= 1000){
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	2200      	movs	r2, #0
 80004dc:	5e9b      	ldrsh	r3, [r3, r2]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	db11      	blt.n	8000506 <set_fan_speed2+0x3a>
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	2200      	movs	r2, #0
 80004e6:	5e9a      	ldrsh	r2, [r3, r2]
 80004e8:	23fa      	movs	r3, #250	@ 0xfa
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dc0a      	bgt.n	8000506 <set_fan_speed2+0x3a>
		*IND = 0;
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <set_fan_speed2+0x70>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
		*INC = speed2;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <set_fan_speed2+0x74>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	1dba      	adds	r2, r7, #6
 80004fe:	2100      	movs	r1, #0
 8000500:	5e52      	ldrsh	r2, [r2, r1]
 8000502:	601a      	str	r2, [r3, #0]
	}else if (-1000 <= speed2 && speed2 < 0){
		*INC = 0;
		*IND = -1*speed2;
	}
}
 8000504:	e015      	b.n	8000532 <set_fan_speed2+0x66>
	}else if (-1000 <= speed2 && speed2 < 0){
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	2200      	movs	r2, #0
 800050a:	5e9b      	ldrsh	r3, [r3, r2]
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <set_fan_speed2+0x78>)
 800050e:	4293      	cmp	r3, r2
 8000510:	db0f      	blt.n	8000532 <set_fan_speed2+0x66>
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	2200      	movs	r2, #0
 8000516:	5e9b      	ldrsh	r3, [r3, r2]
 8000518:	2b00      	cmp	r3, #0
 800051a:	da0a      	bge.n	8000532 <set_fan_speed2+0x66>
		*INC = 0;
 800051c:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <set_fan_speed2+0x74>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
		*IND = -1*speed2;
 8000524:	1dbb      	adds	r3, r7, #6
 8000526:	2200      	movs	r2, #0
 8000528:	5e9b      	ldrsh	r3, [r3, r2]
 800052a:	425a      	negs	r2, r3
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <set_fan_speed2+0x70>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	601a      	str	r2, [r3, #0]
}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	20000034 	.word	0x20000034
 8000540:	20000030 	.word	0x20000030
 8000544:	fffffc18 	.word	0xfffffc18

08000548 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	0018      	movs	r0, r3
 8000552:	230c      	movs	r3, #12
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f004 ffdc 	bl	8005514 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800055c:	4b44      	ldr	r3, [pc, #272]	@ (8000670 <MX_ADC1_Init+0x128>)
 800055e:	4a45      	ldr	r2, [pc, #276]	@ (8000674 <MX_ADC1_Init+0x12c>)
 8000560:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000562:	4b43      	ldr	r3, [pc, #268]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	02d2      	lsls	r2, r2, #11
 8000568:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800056a:	4b41      	ldr	r3, [pc, #260]	@ (8000670 <MX_ADC1_Init+0x128>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000570:	4b3f      	ldr	r3, [pc, #252]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000576:	4b3e      	ldr	r3, [pc, #248]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000578:	2280      	movs	r2, #128	@ 0x80
 800057a:	0392      	lsls	r2, r2, #14
 800057c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800057e:	4b3c      	ldr	r3, [pc, #240]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000580:	2208      	movs	r2, #8
 8000582:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000584:	4b3a      	ldr	r3, [pc, #232]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000586:	2200      	movs	r2, #0
 8000588:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800058a:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <MX_ADC1_Init+0x128>)
 800058c:	2200      	movs	r2, #0
 800058e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000590:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000592:	2201      	movs	r2, #1
 8000594:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000596:	4b36      	ldr	r3, [pc, #216]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000598:	2204      	movs	r2, #4
 800059a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <MX_ADC1_Init+0x128>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005a8:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005aa:	222c      	movs	r2, #44	@ 0x2c
 80005ac:	2100      	movs	r1, #0
 80005ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005be:	2200      	movs	r2, #0
 80005c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005c4:	223c      	movs	r2, #60	@ 0x3c
 80005c6:	2100      	movs	r1, #0
 80005c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005ca:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fa20 	bl	8001a18 <HAL_ADC_Init>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005dc:	f000 fde4 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_ADC1_Init+0x128>)
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fd73 	bl	80020e4 <HAL_ADC_ConfigChannel>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000602:	f000 fdd1 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <MX_ADC1_Init+0x130>)
 800060a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2204      	movs	r2, #4
 8000610:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fd63 	bl	80020e4 <HAL_ADC_ConfigChannel>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000622:	f000 fdc1 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <MX_ADC1_Init+0x134>)
 800062a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2208      	movs	r2, #8
 8000630:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3a      	adds	r2, r7, #4
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fd53 	bl	80020e4 <HAL_ADC_ConfigChannel>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000642:	f000 fdb1 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <MX_ADC1_Init+0x138>)
 800064a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	220c      	movs	r2, #12
 8000650:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_ADC1_Init+0x128>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fd43 	bl	80020e4 <HAL_ADC_ConfigChannel>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000662:	f000 fda1 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b004      	add	sp, #16
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000038 	.word	0x20000038
 8000674:	40012400 	.word	0x40012400
 8000678:	04000002 	.word	0x04000002
 800067c:	10000010 	.word	0x10000010
 8000680:	24000200 	.word	0x24000200

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b09f      	sub	sp, #124	@ 0x7c
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	2364      	movs	r3, #100	@ 0x64
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	0018      	movs	r0, r3
 8000692:	2314      	movs	r3, #20
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f004 ff3c 	bl	8005514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	2418      	movs	r4, #24
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	234c      	movs	r3, #76	@ 0x4c
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f004 ff34 	bl	8005514 <memset>
  if(adcHandle->Instance==ADC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a47      	ldr	r2, [pc, #284]	@ (80007d0 <HAL_ADC_MspInit+0x14c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d000      	beq.n	80006b8 <HAL_ADC_MspInit+0x34>
 80006b6:	e087      	b.n	80007c8 <HAL_ADC_MspInit+0x144>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	01d2      	lsls	r2, r2, #7
 80006be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f003 fc3b 	bl	8003f44 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80006d2:	f000 fd69 	bl	80011a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d6:	4b3f      	ldr	r3, [pc, #252]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 80006d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006da:	4b3e      	ldr	r3, [pc, #248]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 80006dc:	2180      	movs	r1, #128	@ 0x80
 80006de:	0349      	lsls	r1, r1, #13
 80006e0:	430a      	orrs	r2, r1
 80006e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80006e4:	4b3b      	ldr	r3, [pc, #236]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 80006e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	035b      	lsls	r3, r3, #13
 80006ec:	4013      	ands	r3, r2
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b38      	ldr	r3, [pc, #224]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f6:	4b37      	ldr	r3, [pc, #220]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006fe:	4b35      	ldr	r3, [pc, #212]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000702:	2201      	movs	r2, #1
 8000704:	4013      	ands	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 8000710:	2102      	movs	r1, #2
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <HAL_ADC_MspInit+0x150>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2202      	movs	r2, #2
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000722:	2464      	movs	r4, #100	@ 0x64
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2213      	movs	r2, #19
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2203      	movs	r2, #3
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	193a      	adds	r2, r7, r4
 8000738:	23a0      	movs	r3, #160	@ 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fd4c 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2202      	movs	r2, #2
 8000748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2203      	movs	r2, #3
 800074e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	193b      	adds	r3, r7, r4
 8000758:	4a1f      	ldr	r2, [pc, #124]	@ (80007d8 <HAL_ADC_MspInit+0x154>)
 800075a:	0019      	movs	r1, r3
 800075c:	0010      	movs	r0, r2
 800075e:	f002 fd3d 	bl	80031dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 8000764:	4a1e      	ldr	r2, [pc, #120]	@ (80007e0 <HAL_ADC_MspInit+0x15c>)
 8000766:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 800076a:	2205      	movs	r2, #5
 800076c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0052      	lsls	r2, r2, #1
 8000786:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 800078a:	2280      	movs	r2, #128	@ 0x80
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 8000792:	2220      	movs	r2, #32
 8000794:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fa7c 	bl	8002c9c <HAL_DMA_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80007a8:	f000 fcfe 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 80007b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <HAL_ADC_MspInit+0x158>)
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	200c      	movs	r0, #12
 80007be:	f002 fa3b 	bl	8002c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80007c2:	200c      	movs	r0, #12
 80007c4:	f002 fa4d 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b01f      	add	sp, #124	@ 0x7c
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	40012400 	.word	0x40012400
 80007d4:	40021000 	.word	0x40021000
 80007d8:	50000400 	.word	0x50000400
 80007dc:	2000009c 	.word	0x2000009c
 80007e0:	40020008 	.word	0x40020008

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_DMA_Init+0x38>)
 80007ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_DMA_Init+0x38>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_DMA_Init+0x38>)
 80007f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2009      	movs	r0, #9
 8000808:	f002 fa16 	bl	8002c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800080c:	2009      	movs	r0, #9
 800080e:	f002 fa28 	bl	8002c62 <HAL_NVIC_EnableIRQ>

}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	240c      	movs	r4, #12
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2314      	movs	r3, #20
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 fe6f 	bl	8005514 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b39      	ldr	r3, [pc, #228]	@ (800091c <MX_GPIO_Init+0xfc>)
 8000838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083a:	4b38      	ldr	r3, [pc, #224]	@ (800091c <MX_GPIO_Init+0xfc>)
 800083c:	2104      	movs	r1, #4
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
 8000842:	4b36      	ldr	r3, [pc, #216]	@ (800091c <MX_GPIO_Init+0xfc>)
 8000844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000846:	2204      	movs	r2, #4
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b33      	ldr	r3, [pc, #204]	@ (800091c <MX_GPIO_Init+0xfc>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_GPIO_Init+0xfc>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <MX_GPIO_Init+0xfc>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <MX_GPIO_Init+0xfc>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086a:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <MX_GPIO_Init+0xfc>)
 800086c:	2102      	movs	r1, #2
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34
 8000872:	4b2a      	ldr	r3, [pc, #168]	@ (800091c <MX_GPIO_Init+0xfc>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000876:	2202      	movs	r2, #2
 8000878:	4013      	ands	r3, r2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PIN_Pin|D6_PIN_Pin, GPIO_PIN_RESET);
 800087e:	23a0      	movs	r3, #160	@ 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2200      	movs	r2, #0
 8000884:	21c0      	movs	r1, #192	@ 0xc0
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fe14 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_PIN_Pin|RW_PIN_Pin|EN_PIN_Pin|RS_PIN_Pin, GPIO_PIN_RESET);
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_GPIO_Init+0x100>)
 800088e:	2200      	movs	r2, #0
 8000890:	2139      	movs	r1, #57	@ 0x39
 8000892:	0018      	movs	r0, r3
 8000894:	f002 fe0e 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_PIN_GPIO_Port, D4_PIN_Pin, GPIO_PIN_RESET);
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_GPIO_Init+0x104>)
 800089a:	2200      	movs	r2, #0
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	0018      	movs	r0, r3
 80008a0:	f002 fe08 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_PIN_Pin D6_PIN_Pin */
  GPIO_InitStruct.Pin = D7_PIN_Pin|D6_PIN_Pin;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	22c0      	movs	r2, #192	@ 0xc0
 80008a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2201      	movs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	193a      	adds	r2, r7, r4
 80008be:	23a0      	movs	r3, #160	@ 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 fc89 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_PIN_Pin RW_PIN_Pin EN_PIN_Pin RS_PIN_Pin */
  GPIO_InitStruct.Pin = D5_PIN_Pin|RW_PIN_Pin|EN_PIN_Pin|RS_PIN_Pin;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2239      	movs	r2, #57	@ 0x39
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2201      	movs	r2, #1
 80008d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <MX_GPIO_Init+0x100>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f002 fc77 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_PIN_Pin */
  GPIO_InitStruct.Pin = D4_PIN_Pin;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2201      	movs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D4_PIN_GPIO_Port, &GPIO_InitStruct);
 8000908:	187b      	adds	r3, r7, r1
 800090a:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <MX_GPIO_Init+0x104>)
 800090c:	0019      	movs	r1, r3
 800090e:	0010      	movs	r0, r2
 8000910:	f002 fc64 	bl	80031dc <HAL_GPIO_Init>

}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	@ 0x24
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	50000400 	.word	0x50000400
 8000924:	50000800 	.word	0x50000800

08000928 <send_to_lcd>:
#include "gpio.h"
#include <lcd.h>
#include "stm32g0xx_hal.h"
void send_to_lcd(char data, int rs)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	701a      	strb	r2, [r3, #0]
    // RS pin (pro command/data)
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs);  // rs = 1 for data, rs = 0 for command
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4825      	ldr	r0, [pc, #148]	@ (80009d0 <send_to_lcd+0xa8>)
 800093c:	001a      	movs	r2, r3
 800093e:	2101      	movs	r1, #1
 8000940:	f002 fdb8 	bl	80034b4 <HAL_GPIO_WritePin>

    /* Write the data to the respective pins */
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, ((data >> 3) & 0x01)); // D7
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	08db      	lsrs	r3, r3, #3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2201      	movs	r2, #1
 800094e:	4013      	ands	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fdab 	bl	80034b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, ((data >> 2) & 0x01)); // D6
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2140      	movs	r1, #64	@ 0x40
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fd9e 	bl	80034b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, ((data >> 1) & 0x01)); // D5
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2201      	movs	r2, #1
 8000982:	4013      	ands	r3, r2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <send_to_lcd+0xa8>)
 8000988:	001a      	movs	r2, r3
 800098a:	2110      	movs	r1, #16
 800098c:	f002 fd92 	bl	80034b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, ((data >> 0) & 0x01)); // D4
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <send_to_lcd+0xa8>)
 800099c:	001a      	movs	r2, r3
 800099e:	2120      	movs	r1, #32
 80009a0:	f002 fd88 	bl	80034b4 <HAL_GPIO_WritePin>

    /* Toggle EN PIN to send the data */
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET); // Set EN to high
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <send_to_lcd+0xa8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	2102      	movs	r1, #2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 fd82 	bl	80034b4 <HAL_GPIO_WritePin>
    HAL_Delay(20); // Optional delay if needed for timing (e.g., 20 us delay)
 80009b0:	2014      	movs	r0, #20
 80009b2:	f000 fe93 	bl	80016dc <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET); // Set EN to low
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <send_to_lcd+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	0018      	movs	r0, r3
 80009be:	f002 fd79 	bl	80034b4 <HAL_GPIO_WritePin>
    HAL_Delay(20); // Optional delay
 80009c2:	2014      	movs	r0, #20
 80009c4:	f000 fe8a 	bl	80016dc <HAL_Delay>
}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	50000400 	.word	0x50000400

080009d4 <lcd_send_cmd>:
void lcd_send_cmd (char cmd)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
    char datatosend;
    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80009e0:	200f      	movs	r0, #15
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	1dfa      	adds	r2, r7, #7
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	0912      	lsrs	r2, r2, #4
 80009ea:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be while sending command
 80009ec:	0004      	movs	r4, r0
 80009ee:	183b      	adds	r3, r7, r0
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff97 	bl	8000928 <send_to_lcd>
    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80009fa:	0020      	movs	r0, r4
 80009fc:	183b      	adds	r3, r7, r0
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	210f      	movs	r1, #15
 8000a04:	400a      	ands	r2, r1
 8000a06:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend, 0);
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff ff8a 	bl	8000928 <send_to_lcd>
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b005      	add	sp, #20
 8000a1a:	bd90      	pop	{r4, r7, pc}

08000a1c <lcd_send_data>:
void lcd_send_data (char data)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send higher nibble */
    datatosend = ((data>>4)&0x0f);
 8000a28:	200f      	movs	r0, #15
 8000a2a:	183b      	adds	r3, r7, r0
 8000a2c:	1dfa      	adds	r2, r7, #7
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	0912      	lsrs	r2, r2, #4
 8000a32:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000a34:	0004      	movs	r4, r0
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff73 	bl	8000928 <send_to_lcd>
    /* send Lower nibble */
    datatosend = ((data)&0x0f);
 8000a42:	0020      	movs	r0, r4
 8000a44:	183b      	adds	r3, r7, r0
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend, 1);
 8000a50:	183b      	adds	r3, r7, r0
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff ff66 	bl	8000928 <send_to_lcd>
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b005      	add	sp, #20
 8000a62:	bd90      	pop	{r4, r7, pc}

08000a64 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <lcd_put_cur+0x18>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d005      	beq.n	8000a86 <lcd_put_cur+0x22>
 8000a7a:	e009      	b.n	8000a90 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2280      	movs	r2, #128	@ 0x80
 8000a80:	4313      	orrs	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]
            break;
 8000a84:	e004      	b.n	8000a90 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	22c0      	movs	r2, #192	@ 0xc0
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	603b      	str	r3, [r7, #0]
            break;
 8000a8e:	46c0      	nop			@ (mov r8, r8)
    }
    lcd_send_cmd (col);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff9d 	bl	80009d4 <lcd_send_cmd>
}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <lcd_init>:
void lcd_init (void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
    // 4 bit initialisation
    HAL_Delay(50);  // wait for >40ms
 8000aa6:	2032      	movs	r0, #50	@ 0x32
 8000aa8:	f000 fe18 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x30);
 8000aac:	2030      	movs	r0, #48	@ 0x30
 8000aae:	f7ff ff91 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(5);  // wait for >4.1ms
 8000ab2:	2005      	movs	r0, #5
 8000ab4:	f000 fe12 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x30);
 8000ab8:	2030      	movs	r0, #48	@ 0x30
 8000aba:	f7ff ff8b 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(1);  // wait for >100us
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fe0c 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x30);
 8000ac4:	2030      	movs	r0, #48	@ 0x30
 8000ac6:	f7ff ff85 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(10);
 8000aca:	200a      	movs	r0, #10
 8000acc:	f000 fe06 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x20);  // 4bit mode
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f7ff ff7f 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 fe00 	bl	80016dc <HAL_Delay>

  // dislay initialisation
    lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000adc:	2028      	movs	r0, #40	@ 0x28
 8000ade:	f7ff ff79 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fdfa 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ae8:	2008      	movs	r0, #8
 8000aea:	f7ff ff73 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(1);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 fdf4 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x01);  // clear display
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff6d 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fdee 	bl	80016dc <HAL_Delay>
    HAL_Delay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 fdeb 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b06:	2006      	movs	r0, #6
 8000b08:	f7ff ff64 	bl	80009d4 <lcd_send_cmd>
    HAL_Delay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fde5 	bl	80016dc <HAL_Delay>
    lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b12:	200c      	movs	r0, #12
 8000b14:	f7ff ff5e 	bl	80009d4 <lcd_send_cmd>
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <lcd_send_string>:
void lcd_send_string (char * str)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b26:	e006      	b.n	8000b36 <lcd_send_string+0x18>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff ff73 	bl	8000a1c <lcd_send_data>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f4      	bne.n	8000b28 <lcd_send_string+0xa>
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <lcd_clear>:
void lcd_clear (void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff ff41 	bl	80009d4 <lcd_send_cmd>
	HAL_Delay(2);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 fdc2 	bl	80016dc <HAL_Delay>
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_ADC_ConvCpltCallback>:
uint16_t pwmValue;
uint16_t pwmValue1;
uint16_t pwmValue2;
uint16_t pwmValue3;
uint8_t convCompleted=0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10f      	bne.n	8000b92 <HAL_ADC_ConvCpltCallback+0x32>
        readValue  = rawValues[0];
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b74:	881a      	ldrh	r2, [r3, #0]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000b78:	801a      	strh	r2, [r3, #0]
        readValue2 = rawValues[1];
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b7c:	885a      	ldrh	r2, [r3, #2]
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b80:	801a      	strh	r2, [r3, #0]
        readValue3 = rawValues[2];
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b84:	889a      	ldrh	r2, [r3, #4]
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b88:	801a      	strh	r2, [r3, #0]
        readValue4 = rawValues[3];
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b8c:	88da      	ldrh	r2, [r3, #6]
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000b90:	801a      	strh	r2, [r3, #0]
    }
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	20000104 	.word	0x20000104
 8000ba4:	200000fc 	.word	0x200000fc
 8000ba8:	200000fe 	.word	0x200000fe
 8000bac:	20000100 	.word	0x20000100
 8000bb0:	20000102 	.word	0x20000102

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fd0a 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 faac 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f7ff fe2e 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc4:	f7ff fe0e 	bl	80007e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bc8:	f7ff fcbe 	bl	8000548 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bcc:	f000 fb52 	bl	8001274 <MX_TIM1_Init>
	/*ADC1 -> CR &= ~ ADC_CR_ADEN;

	ADC1 -> CR|= ADC_CR_ADCAL;
	while((ADC1 -> CR & ADC_CR_ADCAL)!=0)
	{}*/
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bd0:	4bbc      	ldr	r3, [pc, #752]	@ (8000ec4 <main+0x310>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f003 fca9 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bda:	4bba      	ldr	r3, [pc, #744]	@ (8000ec4 <main+0x310>)
 8000bdc:	2104      	movs	r1, #4
 8000bde:	0018      	movs	r0, r3
 8000be0:	f003 fca4 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000be4:	4bb7      	ldr	r3, [pc, #732]	@ (8000ec4 <main+0x310>)
 8000be6:	2108      	movs	r1, #8
 8000be8:	0018      	movs	r0, r3
 8000bea:	f003 fc9f 	bl	800452c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000bee:	4bb5      	ldr	r3, [pc, #724]	@ (8000ec4 <main+0x310>)
 8000bf0:	210c      	movs	r1, #12
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f003 fc9a 	bl	800452c <HAL_TIM_PWM_Start>
  init_fan(&(TIM1->CCR1), &(TIM1->CCR2), &(TIM1->CCR4), &(TIM1->CCR3));
 8000bf8:	4bb3      	ldr	r3, [pc, #716]	@ (8000ec8 <main+0x314>)
 8000bfa:	4ab4      	ldr	r2, [pc, #720]	@ (8000ecc <main+0x318>)
 8000bfc:	49b4      	ldr	r1, [pc, #720]	@ (8000ed0 <main+0x31c>)
 8000bfe:	48b5      	ldr	r0, [pc, #724]	@ (8000ed4 <main+0x320>)
 8000c00:	f7ff fbf6 	bl	80003f0 <init_fan>

  lcd_init();
 8000c04:	f7ff ff4d 	bl	8000aa2 <lcd_init>
  lcd_put_cur(0, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ff2a 	bl	8000a64 <lcd_put_cur>
  lcd_send_string("HELLO ");
 8000c10:	4bb1      	ldr	r3, [pc, #708]	@ (8000ed8 <main+0x324>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff ff83 	bl	8000b1e <lcd_send_string>
  lcd_send_string("WORLD ");
 8000c18:	4bb0      	ldr	r3, [pc, #704]	@ (8000edc <main+0x328>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff ff7f 	bl	8000b1e <lcd_send_string>
  lcd_send_string("FROM");
 8000c20:	4baf      	ldr	r3, [pc, #700]	@ (8000ee0 <main+0x32c>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff ff7b 	bl	8000b1e <lcd_send_string>
  HAL_Delay(1000);
 8000c28:	23fa      	movs	r3, #250	@ 0xfa
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 fd55 	bl	80016dc <HAL_Delay>
  lcd_put_cur(1, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ff15 	bl	8000a64 <lcd_put_cur>
  lcd_send_string("CONTROLLERSTECH");
 8000c3a:	4baa      	ldr	r3, [pc, #680]	@ (8000ee4 <main+0x330>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff6e 	bl	8000b1e <lcd_send_string>
  HAL_Delay(2000);
 8000c42:	23fa      	movs	r3, #250	@ 0xfa
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fd48 	bl	80016dc <HAL_Delay>
  lcd_clear();
 8000c4c:	f7ff ff7c 	bl	8000b48 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ADC_Calibrate();
	 HAL_ADCEx_Calibration_Start(&hadc1);
 8000c50:	4ba5      	ldr	r3, [pc, #660]	@ (8000ee8 <main+0x334>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 fe28 	bl	80028a8 <HAL_ADCEx_Calibration_Start>
	 HAL_Delay(10);
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f000 fd3f 	bl	80016dc <HAL_Delay>
	 set_fan_speed(fan_speed_global);
 8000c5e:	4ba3      	ldr	r3, [pc, #652]	@ (8000eec <main+0x338>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	5e9b      	ldrsh	r3, [r3, r2]
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff fbf3 	bl	8000450 <set_fan_speed>
	 set_fan_speed2(fan_speed_global2);
 8000c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8000ef0 <main+0x33c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	5e9b      	ldrsh	r3, [r3, r2]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fc2b 	bl	80004cc <set_fan_speed2>
	 //CalculatePWM(&pwmValue, &pwmValue1, &pwmValue2, &pwmValue3);
	 HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 4);
 8000c76:	499f      	ldr	r1, [pc, #636]	@ (8000ef4 <main+0x340>)
 8000c78:	4b9b      	ldr	r3, [pc, #620]	@ (8000ee8 <main+0x334>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 f873 	bl	8001d68 <HAL_ADC_Start_DMA>
	 HAL_Delay(10);  // Krátká prodleva pro stabilizaci
 8000c82:	200a      	movs	r0, #10
 8000c84:	f000 fd2a 	bl	80016dc <HAL_Delay>


	  if (convCompleted) {
 8000c88:	4b9b      	ldr	r3, [pc, #620]	@ (8000ef8 <main+0x344>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d012      	beq.n	8000cb6 <main+0x102>
	      readValue = (uint16_t) rawValues[0];
 8000c90:	4b98      	ldr	r3, [pc, #608]	@ (8000ef4 <main+0x340>)
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	4b99      	ldr	r3, [pc, #612]	@ (8000efc <main+0x348>)
 8000c96:	801a      	strh	r2, [r3, #0]
	      readValue2 = (uint16_t) rawValues[1];
 8000c98:	4b96      	ldr	r3, [pc, #600]	@ (8000ef4 <main+0x340>)
 8000c9a:	885a      	ldrh	r2, [r3, #2]
 8000c9c:	4b98      	ldr	r3, [pc, #608]	@ (8000f00 <main+0x34c>)
 8000c9e:	801a      	strh	r2, [r3, #0]
	      readValue3 = (uint16_t) rawValues[2];
 8000ca0:	4b94      	ldr	r3, [pc, #592]	@ (8000ef4 <main+0x340>)
 8000ca2:	889a      	ldrh	r2, [r3, #4]
 8000ca4:	4b97      	ldr	r3, [pc, #604]	@ (8000f04 <main+0x350>)
 8000ca6:	801a      	strh	r2, [r3, #0]
	      readValue4 = (uint16_t) rawValues[3];
 8000ca8:	4b92      	ldr	r3, [pc, #584]	@ (8000ef4 <main+0x340>)
 8000caa:	88da      	ldrh	r2, [r3, #6]
 8000cac:	4b96      	ldr	r3, [pc, #600]	@ (8000f08 <main+0x354>)
 8000cae:	801a      	strh	r2, [r3, #0]
	      convCompleted = 0;  // Resetování flagu pro další měření
 8000cb0:	4b91      	ldr	r3, [pc, #580]	@ (8000ef8 <main+0x344>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	  }
	  pwmValue = 100 - ((readValue * 500) / 4095);  // Inverzní vztah pro pwmValue
 8000cb6:	4b91      	ldr	r3, [pc, #580]	@ (8000efc <main+0x348>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	001a      	movs	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	015b      	lsls	r3, r3, #5
 8000cc0:	1a9b      	subs	r3, r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	189b      	adds	r3, r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4990      	ldr	r1, [pc, #576]	@ (8000f0c <main+0x358>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff faa4 	bl	8000218 <__divsi3>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	3364      	adds	r3, #100	@ 0x64
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b8d      	ldr	r3, [pc, #564]	@ (8000f10 <main+0x35c>)
 8000cda:	801a      	strh	r2, [r3, #0]
	  pwmValue1 = 100 - ((readValue2 * 500) / 4095);  // Inverzní vztah pro pwmValue1
 8000cdc:	4b88      	ldr	r3, [pc, #544]	@ (8000f00 <main+0x34c>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	0013      	movs	r3, r2
 8000ce4:	015b      	lsls	r3, r3, #5
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	189b      	adds	r3, r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4987      	ldr	r1, [pc, #540]	@ (8000f0c <main+0x358>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fa91 	bl	8000218 <__divsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	3364      	adds	r3, #100	@ 0x64
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b85      	ldr	r3, [pc, #532]	@ (8000f14 <main+0x360>)
 8000d00:	801a      	strh	r2, [r3, #0]
	  pwmValue2 = 100 - ((readValue3 * 500) / 4095);
 8000d02:	4b80      	ldr	r3, [pc, #512]	@ (8000f04 <main+0x350>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	001a      	movs	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	497d      	ldr	r1, [pc, #500]	@ (8000f0c <main+0x358>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fa7e 	bl	8000218 <__divsi3>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	3364      	adds	r3, #100	@ 0x64
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b7c      	ldr	r3, [pc, #496]	@ (8000f18 <main+0x364>)
 8000d26:	801a      	strh	r2, [r3, #0]
	  pwmValue3 = 100 - ((readValue4 * 500) / 4095);
 8000d28:	4b77      	ldr	r3, [pc, #476]	@ (8000f08 <main+0x354>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	015b      	lsls	r3, r3, #5
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	189b      	adds	r3, r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4974      	ldr	r1, [pc, #464]	@ (8000f0c <main+0x358>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fa6b 	bl	8000218 <__divsi3>
 8000d42:	0003      	movs	r3, r0
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3364      	adds	r3, #100	@ 0x64
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b74      	ldr	r3, [pc, #464]	@ (8000f1c <main+0x368>)
 8000d4c:	801a      	strh	r2, [r3, #0]
	  //Hranice pwm signálu
	  if (pwmValue >60000){
 8000d4e:	4b70      	ldr	r3, [pc, #448]	@ (8000f10 <main+0x35c>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	4a73      	ldr	r2, [pc, #460]	@ (8000f20 <main+0x36c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d902      	bls.n	8000d5e <main+0x1aa>
			pwmValue = 1;
 8000d58:	4b6d      	ldr	r3, [pc, #436]	@ (8000f10 <main+0x35c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	801a      	strh	r2, [r3, #0]
		}
	  if (pwmValue1 >60000){
 8000d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f14 <main+0x360>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	4a6f      	ldr	r2, [pc, #444]	@ (8000f20 <main+0x36c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d902      	bls.n	8000d6e <main+0x1ba>
	  			pwmValue1 = 1;
 8000d68:	4b6a      	ldr	r3, [pc, #424]	@ (8000f14 <main+0x360>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	801a      	strh	r2, [r3, #0]
	  		}
	  if (pwmValue2 >60000){
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f18 <main+0x364>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	4a6b      	ldr	r2, [pc, #428]	@ (8000f20 <main+0x36c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d902      	bls.n	8000d7e <main+0x1ca>
	  			pwmValue2 = 1;
 8000d78:	4b67      	ldr	r3, [pc, #412]	@ (8000f18 <main+0x364>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	801a      	strh	r2, [r3, #0]
	  		}
	  if (pwmValue3 >60000){
 8000d7e:	4b67      	ldr	r3, [pc, #412]	@ (8000f1c <main+0x368>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	4a67      	ldr	r2, [pc, #412]	@ (8000f20 <main+0x36c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d902      	bls.n	8000d8e <main+0x1da>
	  			pwmValue3 = 1;
 8000d88:	4b64      	ldr	r3, [pc, #400]	@ (8000f1c <main+0x368>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	801a      	strh	r2, [r3, #0]
	  		}

	  // Logika otáčení motorků
	  if (readValue > readValue2 && readValue2 > readValue3 && readValue2 > readValue4)
 8000d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8000efc <main+0x348>)
 8000d90:	881a      	ldrh	r2, [r3, #0]
 8000d92:	4b5b      	ldr	r3, [pc, #364]	@ (8000f00 <main+0x34c>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d90f      	bls.n	8000dba <main+0x206>
 8000d9a:	4b59      	ldr	r3, [pc, #356]	@ (8000f00 <main+0x34c>)
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	4b59      	ldr	r3, [pc, #356]	@ (8000f04 <main+0x350>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d909      	bls.n	8000dba <main+0x206>
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <main+0x34c>)
 8000da8:	881a      	ldrh	r2, [r3, #0]
 8000daa:	4b57      	ldr	r3, [pc, #348]	@ (8000f08 <main+0x354>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d903      	bls.n	8000dba <main+0x206>
	  {
	  	caseValue = 1;
 8000db2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f24 <main+0x370>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e0cb      	b.n	8000f52 <main+0x39e>
	  }
	  else if (readValue2 > readValue && readValue2 > readValue3 && readValue2 > readValue4)
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <main+0x34c>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000efc <main+0x348>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d90f      	bls.n	8000de6 <main+0x232>
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8000f00 <main+0x34c>)
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	4b4e      	ldr	r3, [pc, #312]	@ (8000f04 <main+0x350>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <main+0x232>
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f00 <main+0x34c>)
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f08 <main+0x354>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d903      	bls.n	8000de6 <main+0x232>
	  {
	  	caseValue = 2;
 8000dde:	4b51      	ldr	r3, [pc, #324]	@ (8000f24 <main+0x370>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e0b5      	b.n	8000f52 <main+0x39e>
	  }
	  else if (readValue2 > readValue3 && readValue3 > readValue && readValue3 > readValue4)
 8000de6:	4b46      	ldr	r3, [pc, #280]	@ (8000f00 <main+0x34c>)
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	4b46      	ldr	r3, [pc, #280]	@ (8000f04 <main+0x350>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d90f      	bls.n	8000e12 <main+0x25e>
 8000df2:	4b44      	ldr	r3, [pc, #272]	@ (8000f04 <main+0x350>)
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	4b41      	ldr	r3, [pc, #260]	@ (8000efc <main+0x348>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d909      	bls.n	8000e12 <main+0x25e>
 8000dfe:	4b41      	ldr	r3, [pc, #260]	@ (8000f04 <main+0x350>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	4b41      	ldr	r3, [pc, #260]	@ (8000f08 <main+0x354>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d903      	bls.n	8000e12 <main+0x25e>
	  {
	  	caseValue = 3;
 8000e0a:	4b46      	ldr	r3, [pc, #280]	@ (8000f24 <main+0x370>)
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e09f      	b.n	8000f52 <main+0x39e>
	  }
	  else if (readValue3 > readValue2 && readValue2 > readValue && readValue2 > readValue4)
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <main+0x350>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <main+0x34c>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d90f      	bls.n	8000e3e <main+0x28a>
 8000e1e:	4b38      	ldr	r3, [pc, #224]	@ (8000f00 <main+0x34c>)
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <main+0x348>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d909      	bls.n	8000e3e <main+0x28a>
 8000e2a:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <main+0x34c>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <main+0x354>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d903      	bls.n	8000e3e <main+0x28a>
	  {
	  	caseValue = 4;
 8000e36:	4b3b      	ldr	r3, [pc, #236]	@ (8000f24 <main+0x370>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e089      	b.n	8000f52 <main+0x39e>
	  }
	  else if (readValue3 > readValue4 && readValue4 > readValue2 && readValue4 > readValue)
 8000e3e:	4b31      	ldr	r3, [pc, #196]	@ (8000f04 <main+0x350>)
 8000e40:	881a      	ldrh	r2, [r3, #0]
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <main+0x354>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d90f      	bls.n	8000e6a <main+0x2b6>
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <main+0x354>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <main+0x34c>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d909      	bls.n	8000e6a <main+0x2b6>
 8000e56:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <main+0x354>)
 8000e58:	881a      	ldrh	r2, [r3, #0]
 8000e5a:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <main+0x348>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d903      	bls.n	8000e6a <main+0x2b6>
	  {
	  	caseValue = 5;
 8000e62:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <main+0x370>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e073      	b.n	8000f52 <main+0x39e>
	  }
	  else if (readValue4 > readValue3 && readValue3 > readValue2 && readValue3 > readValue)
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <main+0x354>)
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <main+0x350>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d90f      	bls.n	8000e96 <main+0x2e2>
 8000e76:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <main+0x350>)
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <main+0x34c>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d909      	bls.n	8000e96 <main+0x2e2>
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <main+0x350>)
 8000e84:	881a      	ldrh	r2, [r3, #0]
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <main+0x348>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d903      	bls.n	8000e96 <main+0x2e2>
	  {
	  	caseValue = 6;
 8000e8e:	4b25      	ldr	r3, [pc, #148]	@ (8000f24 <main+0x370>)
 8000e90:	2206      	movs	r2, #6
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e05d      	b.n	8000f52 <main+0x39e>
	  }
	  else if (readValue4 > readValue && readValue > readValue3 && readValue > readValue2)
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <main+0x354>)
 8000e98:	881a      	ldrh	r2, [r3, #0]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <main+0x348>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d942      	bls.n	8000f28 <main+0x374>
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <main+0x348>)
 8000ea4:	881a      	ldrh	r2, [r3, #0]
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <main+0x350>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d93c      	bls.n	8000f28 <main+0x374>
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <main+0x348>)
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <main+0x34c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d936      	bls.n	8000f28 <main+0x374>
	  {
	  	caseValue = 7;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <main+0x370>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e047      	b.n	8000f52 <main+0x39e>
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20000120 	.word	0x20000120
 8000ec8:	40012c3c 	.word	0x40012c3c
 8000ecc:	40012c40 	.word	0x40012c40
 8000ed0:	40012c38 	.word	0x40012c38
 8000ed4:	40012c34 	.word	0x40012c34
 8000ed8:	08005584 	.word	0x08005584
 8000edc:	0800558c 	.word	0x0800558c
 8000ee0:	08005594 	.word	0x08005594
 8000ee4:	0800559c 	.word	0x0800559c
 8000ee8:	20000038 	.word	0x20000038
 8000eec:	20000116 	.word	0x20000116
 8000ef0:	20000118 	.word	0x20000118
 8000ef4:	20000104 	.word	0x20000104
 8000ef8:	20000114 	.word	0x20000114
 8000efc:	200000fc 	.word	0x200000fc
 8000f00:	200000fe 	.word	0x200000fe
 8000f04:	20000100 	.word	0x20000100
 8000f08:	20000102 	.word	0x20000102
 8000f0c:	fffff001 	.word	0xfffff001
 8000f10:	2000010c 	.word	0x2000010c
 8000f14:	2000010e 	.word	0x2000010e
 8000f18:	20000110 	.word	0x20000110
 8000f1c:	20000112 	.word	0x20000112
 8000f20:	0000ea60 	.word	0x0000ea60
 8000f24:	2000011c 	.word	0x2000011c
	  }
	  else if (readValue > readValue4 && readValue4 > readValue2 && readValue4 > readValue3)
 8000f28:	4b6f      	ldr	r3, [pc, #444]	@ (80010e8 <main+0x534>)
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80010ec <main+0x538>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d90e      	bls.n	8000f52 <main+0x39e>
 8000f34:	4b6d      	ldr	r3, [pc, #436]	@ (80010ec <main+0x538>)
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	4b6d      	ldr	r3, [pc, #436]	@ (80010f0 <main+0x53c>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d908      	bls.n	8000f52 <main+0x39e>
 8000f40:	4b6a      	ldr	r3, [pc, #424]	@ (80010ec <main+0x538>)
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	4b6b      	ldr	r3, [pc, #428]	@ (80010f4 <main+0x540>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d902      	bls.n	8000f52 <main+0x39e>
	  {
	  	caseValue = 8;
 8000f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80010f8 <main+0x544>)
 8000f4e:	2208      	movs	r2, #8
 8000f50:	601a      	str	r2, [r3, #0]
	  }

	  switch (caseValue) {
 8000f52:	4b69      	ldr	r3, [pc, #420]	@ (80010f8 <main+0x544>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d900      	bls.n	8000f5c <main+0x3a8>
 8000f5a:	e0bc      	b.n	80010d6 <main+0x522>
 8000f5c:	009a      	lsls	r2, r3, #2
 8000f5e:	4b67      	ldr	r3, [pc, #412]	@ (80010fc <main+0x548>)
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	469f      	mov	pc, r3
	      case 1:
	          fan_speed_global = pwmValue * 10;
 8000f66:	4b66      	ldr	r3, [pc, #408]	@ (8001100 <main+0x54c>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	1c1a      	adds	r2, r3, #0
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	18d3      	adds	r3, r2, r3
 8000f70:	18db      	adds	r3, r3, r3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b63      	ldr	r3, [pc, #396]	@ (8001104 <main+0x550>)
 8000f78:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = pwmValue * 10;
 8000f7a:	4b61      	ldr	r3, [pc, #388]	@ (8001100 <main+0x54c>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	1c1a      	adds	r2, r3, #0
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	18db      	adds	r3, r3, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001108 <main+0x554>)
 8000f8c:	801a      	strh	r2, [r3, #0]
	          break;
 8000f8e:	e0a9      	b.n	80010e4 <main+0x530>
	      case 2:
	          fan_speed_global = -pwmValue1 * 10;
 8000f90:	4b5e      	ldr	r3, [pc, #376]	@ (800110c <main+0x558>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	1c1a      	adds	r2, r3, #0
 8000f96:	0352      	lsls	r2, r2, #13
 8000f98:	1ad2      	subs	r2, r2, r3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	18db      	adds	r3, r3, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b57      	ldr	r3, [pc, #348]	@ (8001104 <main+0x550>)
 8000fa6:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = -pwmValue1 * 10;
 8000fa8:	4b58      	ldr	r3, [pc, #352]	@ (800110c <main+0x558>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	1c1a      	adds	r2, r3, #0
 8000fae:	0352      	lsls	r2, r2, #13
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	18db      	adds	r3, r3, r3
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	4b52      	ldr	r3, [pc, #328]	@ (8001108 <main+0x554>)
 8000fbe:	801a      	strh	r2, [r3, #0]
	          break;
 8000fc0:	e090      	b.n	80010e4 <main+0x530>
	      case 3:
	          fan_speed_global = pwmValue1 * 10;
 8000fc2:	4b52      	ldr	r3, [pc, #328]	@ (800110c <main+0x558>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	1c1a      	adds	r2, r3, #0
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	18d3      	adds	r3, r2, r3
 8000fcc:	18db      	adds	r3, r3, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	@ (8001104 <main+0x550>)
 8000fd4:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = pwmValue1 * 10;
 8000fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800110c <main+0x558>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	1c1a      	adds	r2, r3, #0
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	18db      	adds	r3, r3, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b48      	ldr	r3, [pc, #288]	@ (8001108 <main+0x554>)
 8000fe8:	801a      	strh	r2, [r3, #0]
	          break;
 8000fea:	e07b      	b.n	80010e4 <main+0x530>
	      case 4:
	          fan_speed_global = -pwmValue2 * 10;
 8000fec:	4b48      	ldr	r3, [pc, #288]	@ (8001110 <main+0x55c>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	1c1a      	adds	r2, r3, #0
 8000ff2:	0352      	lsls	r2, r2, #13
 8000ff4:	1ad2      	subs	r2, r2, r3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	18db      	adds	r3, r3, r3
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <main+0x550>)
 8001002:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = -pwmValue2 * 10;
 8001004:	4b42      	ldr	r3, [pc, #264]	@ (8001110 <main+0x55c>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	1c1a      	adds	r2, r3, #0
 800100a:	0352      	lsls	r2, r2, #13
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	18db      	adds	r3, r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <main+0x554>)
 800101a:	801a      	strh	r2, [r3, #0]
	          break;
 800101c:	e062      	b.n	80010e4 <main+0x530>
	      case 5:
	          fan_speed_global = pwmValue2 * 10;
 800101e:	4b3c      	ldr	r3, [pc, #240]	@ (8001110 <main+0x55c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	1c1a      	adds	r2, r3, #0
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	18d3      	adds	r3, r2, r3
 8001028:	18db      	adds	r3, r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <main+0x550>)
 8001030:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = pwmValue2 * 10;
 8001032:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <main+0x55c>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	1c1a      	adds	r2, r3, #0
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	18db      	adds	r3, r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <main+0x554>)
 8001044:	801a      	strh	r2, [r3, #0]
	          break;
 8001046:	e04d      	b.n	80010e4 <main+0x530>
	      case 6:
	          fan_speed_global = -pwmValue3 * 10;
 8001048:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <main+0x560>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	1c1a      	adds	r2, r3, #0
 800104e:	0352      	lsls	r2, r2, #13
 8001050:	1ad2      	subs	r2, r2, r3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	18db      	adds	r3, r3, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <main+0x550>)
 800105e:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = -pwmValue3 * 10;
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <main+0x560>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	1c1a      	adds	r2, r3, #0
 8001066:	0352      	lsls	r2, r2, #13
 8001068:	1ad2      	subs	r2, r2, r3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	18db      	adds	r3, r3, r3
 8001070:	b29b      	uxth	r3, r3
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <main+0x554>)
 8001076:	801a      	strh	r2, [r3, #0]
	          break;
 8001078:	e034      	b.n	80010e4 <main+0x530>
	      case 7:
	          fan_speed_global = pwmValue3 * 10;
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <main+0x560>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	1c1a      	adds	r2, r3, #0
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	18db      	adds	r3, r3, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <main+0x550>)
 800108c:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = pwmValue3 * 10;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <main+0x560>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	1c1a      	adds	r2, r3, #0
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	18db      	adds	r3, r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <main+0x554>)
 80010a0:	801a      	strh	r2, [r3, #0]
	          break;
 80010a2:	e01f      	b.n	80010e4 <main+0x530>
	      case 8:
	          fan_speed_global = -pwmValue * 10;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <main+0x54c>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	1c1a      	adds	r2, r3, #0
 80010aa:	0352      	lsls	r2, r2, #13
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	18db      	adds	r3, r3, r3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <main+0x550>)
 80010ba:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = -pwmValue * 10;
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <main+0x54c>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	1c1a      	adds	r2, r3, #0
 80010c2:	0352      	lsls	r2, r2, #13
 80010c4:	1ad2      	subs	r2, r2, r3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	18db      	adds	r3, r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <main+0x554>)
 80010d2:	801a      	strh	r2, [r3, #0]
	          break;
 80010d4:	e006      	b.n	80010e4 <main+0x530>
	      default:
	          fan_speed_global = 0;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <main+0x550>)
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
	          fan_speed_global2 = 0;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <main+0x554>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
	          break;
 80010e2:	46c0      	nop			@ (mov r8, r8)
	 HAL_ADCEx_Calibration_Start(&hadc1);
 80010e4:	e5b4      	b.n	8000c50 <main+0x9c>
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	200000fc 	.word	0x200000fc
 80010ec:	20000102 	.word	0x20000102
 80010f0:	200000fe 	.word	0x200000fe
 80010f4:	20000100 	.word	0x20000100
 80010f8:	2000011c 	.word	0x2000011c
 80010fc:	080055ac 	.word	0x080055ac
 8001100:	2000010c 	.word	0x2000010c
 8001104:	20000116 	.word	0x20000116
 8001108:	20000118 	.word	0x20000118
 800110c:	2000010e 	.word	0x2000010e
 8001110:	20000110 	.word	0x20000110
 8001114:	20000112 	.word	0x20000112

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b095      	sub	sp, #84	@ 0x54
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	2414      	movs	r4, #20
 8001120:	193b      	adds	r3, r7, r4
 8001122:	0018      	movs	r0, r3
 8001124:	233c      	movs	r3, #60	@ 0x3c
 8001126:	001a      	movs	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	f004 f9f3 	bl	8005514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	0018      	movs	r0, r3
 8001132:	2310      	movs	r3, #16
 8001134:	001a      	movs	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	f004 f9ec 	bl	8005514 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	0018      	movs	r0, r3
 8001142:	f002 f9d5 	bl	80034f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2202      	movs	r2, #2
 800114a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	0052      	lsls	r2, r2, #1
 8001152:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115a:	193b      	adds	r3, r7, r4
 800115c:	2240      	movs	r2, #64	@ 0x40
 800115e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001160:	193b      	adds	r3, r7, r4
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	193b      	adds	r3, r7, r4
 8001168:	0018      	movs	r0, r3
 800116a:	f002 fa01 	bl	8003570 <HAL_RCC_OscConfig>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001172:	f000 f819 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2100      	movs	r1, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f002 fd4c 	bl	8003c30 <HAL_RCC_ClockConfig>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800119c:	f000 f804 	bl	80011a8 <Error_Handler>
  }
}
 80011a0:	46c0      	nop			@ (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b015      	add	sp, #84	@ 0x54
 80011a6:	bd90      	pop	{r4, r7, pc}

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	e7fd      	b.n	80011b0 <Error_Handler+0x8>

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_MspInit+0x4c>)
 80011bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_MspInit+0x4c>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	2201      	movs	r2, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_MspInit+0x4c>)
 80011d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_MspInit+0x4c>)
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0549      	lsls	r1, r1, #21
 80011dc:	430a      	orrs	r2, r1
 80011de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011e0:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <HAL_MspInit+0x4c>)
 80011e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	055b      	lsls	r3, r3, #21
 80011e8:	4013      	ands	r3, r2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80011ee:	23c0      	movs	r3, #192	@ 0xc0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 fa96 	bl	8001724 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 fa3a 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <DMA1_Channel1_IRQHandler+0x14>)
 800123e:	0018      	movs	r0, r3
 8001240:	f001 fe5e 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	2000009c 	.word	0x2000009c

08001250 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <ADC1_COMP_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fe14 	bl	8001e84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	20000038 	.word	0x20000038

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b09c      	sub	sp, #112	@ 0x70
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	2360      	movs	r3, #96	@ 0x60
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	0018      	movs	r0, r3
 8001280:	2310      	movs	r3, #16
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f004 f945 	bl	8005514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	2354      	movs	r3, #84	@ 0x54
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	0018      	movs	r0, r3
 8001290:	230c      	movs	r3, #12
 8001292:	001a      	movs	r2, r3
 8001294:	2100      	movs	r1, #0
 8001296:	f004 f93d 	bl	8005514 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	2338      	movs	r3, #56	@ 0x38
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	0018      	movs	r0, r3
 80012a0:	231c      	movs	r3, #28
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f004 f935 	bl	8005514 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	0018      	movs	r0, r3
 80012ae:	2334      	movs	r3, #52	@ 0x34
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	f004 f92e 	bl	8005514 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012ba:	4a63      	ldr	r2, [pc, #396]	@ (8001448 <MX_TIM1_Init+0x1d4>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012be:	4b61      	ldr	r3, [pc, #388]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012cc:	22fa      	movs	r2, #250	@ 0xfa
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e4:	4b57      	ldr	r3, [pc, #348]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f003 f868 	bl	80043bc <HAL_TIM_Base_Init>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80012f0:	f7ff ff5a 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	2160      	movs	r1, #96	@ 0x60
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	0152      	lsls	r2, r2, #5
 80012fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012fe:	187a      	adds	r2, r7, r1
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f003 fb01 	bl	800490c <HAL_TIM_ConfigClockSource>
 800130a:	1e03      	subs	r3, r0, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800130e:	f7ff ff4b 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001312:	4b4c      	ldr	r3, [pc, #304]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 8001314:	0018      	movs	r0, r3
 8001316:	f003 f8a9 	bl	800446c <HAL_TIM_PWM_Init>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800131e:	f7ff ff43 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2154      	movs	r1, #84	@ 0x54
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001336:	187a      	adds	r2, r7, r1
 8001338:	4b42      	ldr	r3, [pc, #264]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f003 ffd7 	bl	80052f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001346:	f7ff ff2f 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134a:	2138      	movs	r1, #56	@ 0x38
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2260      	movs	r2, #96	@ 0x60
 8001350:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	1879      	adds	r1, r7, r1
 8001378:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 800137a:	2200      	movs	r2, #0
 800137c:	0018      	movs	r0, r3
 800137e:	f003 f9c5 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001386:	f7ff ff0f 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138a:	2338      	movs	r3, #56	@ 0x38
 800138c:	18f9      	adds	r1, r7, r3
 800138e:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 8001390:	2204      	movs	r2, #4
 8001392:	0018      	movs	r0, r3
 8001394:	f003 f9ba 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800139c:	f7ff ff04 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	2338      	movs	r3, #56	@ 0x38
 80013a2:	18f9      	adds	r1, r7, r3
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	0018      	movs	r0, r3
 80013aa:	f003 f9af 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013b2:	f7ff fef9 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b6:	2338      	movs	r3, #56	@ 0x38
 80013b8:	18f9      	adds	r1, r7, r3
 80013ba:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 80013bc:	220c      	movs	r2, #12
 80013be:	0018      	movs	r0, r3
 80013c0:	f003 f9a4 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80013c8:	f7ff feee 	bl	80011a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	0192      	lsls	r2, r2, #6
 80013f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	0492      	lsls	r2, r2, #18
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800141e:	1d3a      	adds	r2, r7, #4
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f003 ffd9 	bl	80053dc <HAL_TIMEx_ConfigBreakDeadTime>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0x1be>
  {
    Error_Handler();
 800142e:	f7ff febb 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <MX_TIM1_Init+0x1d0>)
 8001434:	0018      	movs	r0, r3
 8001436:	f000 f83f 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b01c      	add	sp, #112	@ 0x70
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	20000120 	.word	0x20000120
 8001448:	40012c00 	.word	0x40012c00

0800144c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b097      	sub	sp, #92	@ 0x5c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	240c      	movs	r4, #12
 8001456:	193b      	adds	r3, r7, r4
 8001458:	0018      	movs	r0, r3
 800145a:	234c      	movs	r3, #76	@ 0x4c
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f004 f858 	bl	8005514 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <HAL_TIM_Base_MspInit+0x64>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d11c      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	0392      	lsls	r2, r2, #14
 8001474:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2200      	movs	r2, #0
 800147a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	193b      	adds	r3, r7, r4
 800147e:	0018      	movs	r0, r3
 8001480:	f002 fd60 	bl	8003f44 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001488:	f7ff fe8e 	bl	80011a8 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_TIM_Base_MspInit+0x68>)
 800148e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_TIM_Base_MspInit+0x68>)
 8001492:	2180      	movs	r1, #128	@ 0x80
 8001494:	0109      	lsls	r1, r1, #4
 8001496:	430a      	orrs	r2, r1
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_TIM_Base_MspInit+0x68>)
 800149c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b017      	add	sp, #92	@ 0x5c
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	40012c00 	.word	0x40012c00
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	@ 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	2414      	movs	r4, #20
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f004 f822 	bl	8005514 <memset>
  if(timHandle->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <HAL_TIM_MspPostInit+0xb8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d145      	bne.n	8001566 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <HAL_TIM_MspPostInit+0xbc>)
 80014dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014de:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <HAL_TIM_MspPostInit+0xbc>)
 80014e0:	2104      	movs	r1, #4
 80014e2:	430a      	orrs	r2, r1
 80014e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_TIM_MspPostInit+0xbc>)
 80014e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ea:	2204      	movs	r2, #4
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <HAL_TIM_MspPostInit+0xbc>)
 80014f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <HAL_TIM_MspPostInit+0xbc>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <HAL_TIM_MspPostInit+0xbc>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001502:	2201      	movs	r2, #1
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2202      	movs	r2, #2
 8001516:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	193b      	adds	r3, r7, r4
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001524:	193b      	adds	r3, r7, r4
 8001526:	2202      	movs	r2, #2
 8001528:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	193b      	adds	r3, r7, r4
 800152c:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <HAL_TIM_MspPostInit+0xc0>)
 800152e:	0019      	movs	r1, r3
 8001530:	0010      	movs	r0, r2
 8001532:	f001 fe53 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001536:	0021      	movs	r1, r4
 8001538:	187b      	adds	r3, r7, r1
 800153a:	22e0      	movs	r2, #224	@ 0xe0
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2202      	movs	r2, #2
 8001544:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	187a      	adds	r2, r7, r1
 800155a:	23a0      	movs	r3, #160	@ 0xa0
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f001 fe3b 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b00b      	add	sp, #44	@ 0x2c
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	40012c00 	.word	0x40012c00
 8001574:	40021000 	.word	0x40021000
 8001578:	50000800 	.word	0x50000800

0800157c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800157c:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001580:	f7ff fe72 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015aa:	f003 ffbb 	bl	8005524 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015ae:	f7ff fb01 	bl	8000bb4 <main>

080015b2 <LoopForever>:

LoopForever:
  b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   r0, =_estack
 80015b4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015c0:	0800566c 	.word	0x0800566c
  ldr r2, =_sbss
 80015c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015c8:	20000170 	.word	0x20000170

080015cc <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <CEC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_Init+0x3c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_Init+0x3c>)
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	0049      	lsls	r1, r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ea:	2003      	movs	r0, #3
 80015ec:	f000 f810 	bl	8001610 <HAL_InitTick>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d003      	beq.n	80015fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e001      	b.n	8001600 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fdda 	bl	80011b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001620:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <HAL_InitTick+0x88>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d02b      	beq.n	8001680 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <HAL_InitTick+0x8c>)
 800162a:	681c      	ldr	r4, [r3, #0]
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <HAL_InitTick+0x88>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	0019      	movs	r1, r3
 8001632:	23fa      	movs	r3, #250	@ 0xfa
 8001634:	0098      	lsls	r0, r3, #2
 8001636:	f7fe fd65 	bl	8000104 <__udivsi3>
 800163a:	0003      	movs	r3, r0
 800163c:	0019      	movs	r1, r3
 800163e:	0020      	movs	r0, r4
 8001640:	f7fe fd60 	bl	8000104 <__udivsi3>
 8001644:	0003      	movs	r3, r0
 8001646:	0018      	movs	r0, r3
 8001648:	f001 fb1b 	bl	8002c82 <HAL_SYSTICK_Config>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d112      	bne.n	8001676 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d80a      	bhi.n	800166c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	2301      	movs	r3, #1
 800165a:	425b      	negs	r3, r3
 800165c:	2200      	movs	r2, #0
 800165e:	0018      	movs	r0, r3
 8001660:	f001 faea 	bl	8002c38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_InitTick+0x90>)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e00d      	b.n	8001688 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800166c:	230f      	movs	r3, #15
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e008      	b.n	8001688 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001676:	230f      	movs	r3, #15
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e003      	b.n	8001688 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001680:	230f      	movs	r3, #15
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001688:	230f      	movs	r3, #15
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b005      	add	sp, #20
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	20000008 	.word	0x20000008
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_IncTick+0x1c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	001a      	movs	r2, r3
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_IncTick+0x20>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	18d2      	adds	r2, r2, r3
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_IncTick+0x20>)
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	20000008 	.word	0x20000008
 80016c4:	2000016c 	.word	0x2000016c

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b02      	ldr	r3, [pc, #8]	@ (80016d8 <HAL_GetTick+0x10>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	2000016c 	.word	0x2000016c

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff fff0 	bl	80016c8 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3301      	adds	r3, #1
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	001a      	movs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	189b      	adds	r3, r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	f7ff ffe0 	bl	80016c8 <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	20000008 	.word	0x20000008

08001724 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	40010000 	.word	0x40010000
 800174c:	fffff9ff 	.word	0xfffff9ff

08001750 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001760:	401a      	ands	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	fe3fffff 	.word	0xfe3fffff

08001778 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	23e0      	movs	r3, #224	@ 0xe0
 8001786:	045b      	lsls	r3, r3, #17
 8001788:	4013      	ands	r3, r2
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}

08001792 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	2104      	movs	r1, #4
 80017a6:	400a      	ands	r2, r1
 80017a8:	2107      	movs	r1, #7
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	43d2      	mvns	r2, r2
 80017b0:	401a      	ands	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2104      	movs	r1, #4
 80017b6:	400b      	ands	r3, r1
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4099      	lsls	r1, r3
 80017bc:	000b      	movs	r3, r1
 80017be:	431a      	orrs	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	2104      	movs	r1, #4
 80017de:	400a      	ands	r2, r1
 80017e0:	2107      	movs	r1, #7
 80017e2:	4091      	lsls	r1, r2
 80017e4:	000a      	movs	r2, r1
 80017e6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2104      	movs	r1, #4
 80017ec:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017ee:	40da      	lsrs	r2, r3
 80017f0:	0013      	movs	r3, r2
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}

080017fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	23c0      	movs	r3, #192	@ 0xc0
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d101      	bne.n	8001812 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	211f      	movs	r1, #31
 8001830:	400a      	ands	r2, r1
 8001832:	210f      	movs	r1, #15
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	43d2      	mvns	r2, r2
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0e9b      	lsrs	r3, r3, #26
 8001840:	210f      	movs	r1, #15
 8001842:	4019      	ands	r1, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	201f      	movs	r0, #31
 8001848:	4003      	ands	r3, r0
 800184a:	4099      	lsls	r1, r3
 800184c:	000b      	movs	r3, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001854:	46c0      	nop			@ (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}

0800185c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	035b      	lsls	r3, r3, #13
 800186e:	0b5b      	lsrs	r3, r3, #13
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}

0800187e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	0352      	lsls	r2, r2, #13
 8001890:	0b52      	lsrs	r2, r2, #13
 8001892:	43d2      	mvns	r2, r2
 8001894:	401a      	ands	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2203      	movs	r2, #3
 80018b0:	4013      	ands	r3, r2
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	0212      	lsls	r2, r2, #8
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	401a      	ands	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	400b      	ands	r3, r1
 80018dc:	4904      	ldr	r1, [pc, #16]	@ (80018f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	07ffff00 	.word	0x07ffff00

080018f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <LL_ADC_EnableInternalRegulator+0x24>)
 8001902:	4013      	ands	r3, r2
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	6fffffe8 	.word	0x6fffffe8

0800191c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	401a      	ands	r2, r3
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	055b      	lsls	r3, r3, #21
 8001932:	429a      	cmp	r2, r3
 8001934:	d101      	bne.n	800193a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <LL_ADC_Enable+0x20>)
 8001952:	4013      	ands	r3, r2
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}
 8001964:	7fffffe8 	.word	0x7fffffe8

08001968 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <LL_ADC_Disable+0x20>)
 8001976:	4013      	ands	r3, r2
 8001978:	2202      	movs	r2, #2
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}
 8001988:	7fffffe8 	.word	0x7fffffe8

0800198c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <LL_ADC_IsEnabled+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_IsEnabled+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}

080019ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d101      	bne.n	80019c6 <LL_ADC_IsDisableOngoing+0x18>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <LL_ADC_IsDisableOngoing+0x1a>
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <LL_ADC_REG_StartConversion+0x20>)
 80019de:	4013      	ands	r3, r2
 80019e0:	2204      	movs	r2, #4
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	7fffffe8 	.word	0x7fffffe8

080019f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d101      	bne.n	8001a0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	231f      	movs	r3, #31
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e17f      	b.n	8001d3e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10a      	bne.n	8001a5c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe fe1b 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2254      	movs	r2, #84	@ 0x54
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ff5b 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d115      	bne.n	8001a96 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff ff40 	bl	80018f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a74:	4bb4      	ldr	r3, [pc, #720]	@ (8001d48 <HAL_ADC_Init+0x330>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	49b4      	ldr	r1, [pc, #720]	@ (8001d4c <HAL_ADC_Init+0x334>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7fe fb42 	bl	8000104 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	3301      	adds	r3, #1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f9      	bne.n	8001a8a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff ff3e 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	1e03      	subs	r3, r0, #0
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001abc:	231f      	movs	r3, #31
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff ff93 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d000      	beq.n	8001ade <HAL_ADC_Init+0xc6>
 8001adc:	e122      	b.n	8001d24 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d000      	beq.n	8001ae6 <HAL_ADC_Init+0xce>
 8001ae4:	e11e      	b.n	8001d24 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	4a99      	ldr	r2, [pc, #612]	@ (8001d50 <HAL_ADC_Init+0x338>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	2202      	movs	r2, #2
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff ff46 	bl	800198c <LL_ADC_IsEnabled>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d000      	beq.n	8001b06 <HAL_ADC_Init+0xee>
 8001b04:	e0ad      	b.n	8001c62 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e1b      	ldrb	r3, [r3, #24]
 8001b0e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b10:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7e5b      	ldrb	r3, [r3, #25]
 8001b16:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b18:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7e9b      	ldrb	r3, [r3, #26]
 8001b1e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b20:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_ADC_Init+0x118>
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	e000      	b.n	8001b32 <HAL_ADC_Init+0x11a>
 8001b30:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b32:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b38:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da04      	bge.n	8001b4c <HAL_ADC_Init+0x134>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	e001      	b.n	8001b50 <HAL_ADC_Init+0x138>
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001b50:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	212c      	movs	r1, #44	@ 0x2c
 8001b56:	5c5b      	ldrb	r3, [r3, r1]
 8001b58:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b5a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d115      	bne.n	8001b98 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e9b      	ldrb	r3, [r3, #26]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	0252      	lsls	r2, r2, #9
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	e00b      	b.n	8001b98 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	2220      	movs	r2, #32
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	2201      	movs	r2, #1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ba4:	23e0      	movs	r3, #224	@ 0xe0
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4a65      	ldr	r2, [pc, #404]	@ (8001d54 <HAL_ADC_Init+0x33c>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0f9b      	lsrs	r3, r3, #30
 8001bd2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	223c      	movs	r2, #60	@ 0x3c
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d111      	bne.n	8001c0e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0f9b      	lsrs	r3, r3, #30
 8001bf0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bf6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001bfc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001c02:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4a50      	ldr	r2, [pc, #320]	@ (8001d58 <HAL_ADC_Init+0x340>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	23c0      	movs	r3, #192	@ 0xc0
 8001c2a:	061b      	lsls	r3, r3, #24
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d018      	beq.n	8001c62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d012      	beq.n	8001c62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d00c      	beq.n	8001c62 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c48:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <HAL_ADC_Init+0x344>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a44      	ldr	r2, [pc, #272]	@ (8001d60 <HAL_ADC_Init+0x348>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	23f0      	movs	r3, #240	@ 0xf0
 8001c58:	039b      	lsls	r3, r3, #14
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d5c <HAL_ADC_Init+0x344>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	f7ff fd90 	bl	8001792 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7a:	493a      	ldr	r1, [pc, #232]	@ (8001d64 <HAL_ADC_Init+0x34c>)
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	f7ff fd88 	bl	8001792 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2110      	movs	r1, #16
 8001c96:	4249      	negs	r1, r1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c9c:	e018      	b.n	8001cd0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	039b      	lsls	r3, r3, #14
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d112      	bne.n	8001cd0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	221c      	movs	r2, #28
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7ff fd78 	bl	80017cc <LL_ADC_GetSamplingTimeCommonChannels>
 8001cdc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d10b      	bne.n	8001cfe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cfc:	e01c      	b.n	8001d38 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	2212      	movs	r2, #18
 8001d04:	4393      	bics	r3, r2
 8001d06:	2210      	movs	r2, #16
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d12:	2201      	movs	r2, #1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001d1a:	231f      	movs	r3, #31
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d22:	e009      	b.n	8001d38 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	2210      	movs	r2, #16
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d38:	231f      	movs	r3, #31
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b008      	add	sp, #32
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	00030d40 	.word	0x00030d40
 8001d50:	fffffefd 	.word	0xfffffefd
 8001d54:	ffde0201 	.word	0xffde0201
 8001d58:	1ffffc02 	.word	0x1ffffc02
 8001d5c:	40012708 	.word	0x40012708
 8001d60:	ffc3ffff 	.word	0xffc3ffff
 8001d64:	07ffff04 	.word	0x07ffff04

08001d68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fe3b 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d16c      	bne.n	8001e5c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2254      	movs	r2, #84	@ 0x54
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_Start_DMA+0x28>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e06c      	b.n	8001e6a <HAL_ADC_Start_DMA+0x102>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2254      	movs	r2, #84	@ 0x54
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d113      	bne.n	8001dcc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff fdef 	bl	800198c <LL_ADC_IsEnabled>
 8001dae:	1e03      	subs	r3, r0, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff fdd6 	bl	8001968 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dcc:	2517      	movs	r5, #23
 8001dce:	197c      	adds	r4, r7, r5
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fb5e 	bl	8002494 <ADC_Enable>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ddc:	002c      	movs	r4, r5
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d13e      	bne.n	8001e64 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	4a22      	ldr	r2, [pc, #136]	@ (8001e74 <HAL_ADC_Start_DMA+0x10c>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	0052      	lsls	r2, r2, #1
 8001df2:	431a      	orrs	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e02:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_ADC_Start_DMA+0x110>)
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_ADC_Start_DMA+0x114>)
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e12:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_ADC_Start_DMA+0x118>)
 8001e14:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	221c      	movs	r2, #28
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2254      	movs	r2, #84	@ 0x54
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2110      	movs	r1, #16
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3340      	adds	r3, #64	@ 0x40
 8001e40:	0019      	movs	r1, r3
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	193c      	adds	r4, r7, r4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f000 ffd4 	bl	8002df4 <HAL_DMA_Start_IT>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fdbb 	bl	80019d0 <LL_ADC_REG_StartConversion>
 8001e5a:	e003      	b.n	8001e64 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e5c:	2317      	movs	r3, #23
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2202      	movs	r2, #2
 8001e62:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e64:	2317      	movs	r3, #23
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b006      	add	sp, #24
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	fffff0fe 	.word	0xfffff0fe
 8001e78:	0800265d 	.word	0x0800265d
 8001e7c:	08002725 	.word	0x08002725
 8001e80:	08002743 	.word	0x08002743

08001e84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d017      	beq.n	8001ed8 <HAL_ADC_IRQHandler+0x54>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	2280      	movs	r2, #128	@ 0x80
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 fdf8 	bl	8002ac0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x64>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2208      	movs	r2, #8
 8001eec:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eee:	d04d      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d049      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	2210      	movs	r2, #16
 8001efe:	4013      	ands	r3, r2
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fc70 	bl	80017fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d02e      	beq.n	8001f7c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7e9b      	ldrb	r3, [r3, #26]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d12a      	bne.n	8001f7c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d123      	bne.n	8001f7c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff fd5b 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d110      	bne.n	8001f64 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	210c      	movs	r1, #12
 8001f4e:	438a      	bics	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <HAL_ADC_IRQHandler+0x22c>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f62:	e00b      	b.n	8001f7c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	2220      	movs	r2, #32
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	2201      	movs	r2, #1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7fe fdee 	bl	8000b60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	220c      	movs	r2, #12
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	4013      	ands	r3, r2
 8001f92:	d012      	beq.n	8001fba <HAL_ADC_IRQHandler+0x136>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2280      	movs	r2, #128	@ 0x80
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	0252      	lsls	r2, r2, #9
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 f889 	bl	80020c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d014      	beq.n	8001fee <HAL_ADC_IRQHandler+0x16a>
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	0292      	lsls	r2, r2, #10
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fd5e 	bl	8002aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2280      	movs	r2, #128	@ 0x80
 8001fea:	0052      	lsls	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d014      	beq.n	8002022 <HAL_ADC_IRQHandler+0x19e>
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d00f      	beq.n	8002022 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	02d2      	lsls	r2, r2, #11
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fd4c 	bl	8002ab0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2210      	movs	r2, #16
 8002026:	4013      	ands	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_ADC_IRQHandler+0x1fe>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2210      	movs	r2, #16
 800202e:	4013      	ands	r3, r2
 8002030:	d027      	beq.n	8002082 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e008      	b.n	8002052 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff fc2c 	bl	80018a2 <LL_ADC_REG_GetDMATransfer>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800204e:	2301      	movs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d110      	bne.n	800207a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	00d2      	lsls	r2, r2, #3
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	2202      	movs	r2, #2
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f82d 	bl	80020d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2210      	movs	r2, #16
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	019b      	lsls	r3, r3, #6
 8002088:	4013      	ands	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_ADC_IRQHandler+0x224>
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	4013      	ands	r3, r2
 8002094:	d008      	beq.n	80020a8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f000 fd19 	bl	8002ad0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2280      	movs	r2, #128	@ 0x80
 80020a4:	0192      	lsls	r2, r2, #6
 80020a6:	601a      	str	r2, [r3, #0]
  }
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b006      	add	sp, #24
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	fffffefe 	.word	0xfffffefe

080020b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ee:	2317      	movs	r3, #23
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2254      	movs	r2, #84	@ 0x54
 80020fe:	5c9b      	ldrb	r3, [r3, r2]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x24>
 8002104:	2302      	movs	r3, #2
 8002106:	e1c0      	b.n	800248a <HAL_ADC_ConfigChannel+0x3a6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2254      	movs	r2, #84	@ 0x54
 800210c:	2101      	movs	r1, #1
 800210e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fc6d 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d000      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x3c>
 800211e:	e1a3      	b.n	8002468 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d100      	bne.n	800212a <HAL_ADC_ConfigChannel+0x46>
 8002128:	e143      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	429a      	cmp	r2, r3
 8002134:	d004      	beq.n	8002140 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800213a:	4ac1      	ldr	r2, [pc, #772]	@ (8002440 <HAL_ADC_ConfigChannel+0x35c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0019      	movs	r1, r3
 800214a:	0010      	movs	r0, r2
 800214c:	f7ff fb86 	bl	800185c <LL_ADC_REG_SetSequencerChAdd>
 8002150:	e0c9      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	211f      	movs	r1, #31
 800215c:	400b      	ands	r3, r1
 800215e:	210f      	movs	r1, #15
 8002160:	4099      	lsls	r1, r3
 8002162:	000b      	movs	r3, r1
 8002164:	43db      	mvns	r3, r3
 8002166:	4013      	ands	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	035b      	lsls	r3, r3, #13
 8002170:	0b5b      	lsrs	r3, r3, #13
 8002172:	d105      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x9c>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	221f      	movs	r2, #31
 800217c:	4013      	ands	r3, r2
 800217e:	e098      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	4013      	ands	r3, r2
 8002188:	d000      	beq.n	800218c <HAL_ADC_ConfigChannel+0xa8>
 800218a:	e091      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1cc>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d000      	beq.n	8002198 <HAL_ADC_ConfigChannel+0xb4>
 8002196:	e089      	b.n	80022ac <HAL_ADC_ConfigChannel+0x1c8>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2204      	movs	r2, #4
 800219e:	4013      	ands	r3, r2
 80021a0:	d000      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0xc0>
 80021a2:	e081      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x1c4>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2208      	movs	r2, #8
 80021aa:	4013      	ands	r3, r2
 80021ac:	d000      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0xcc>
 80021ae:	e079      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x1c0>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2210      	movs	r2, #16
 80021b6:	4013      	ands	r3, r2
 80021b8:	d000      	beq.n	80021bc <HAL_ADC_ConfigChannel+0xd8>
 80021ba:	e071      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x1bc>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2220      	movs	r2, #32
 80021c2:	4013      	ands	r3, r2
 80021c4:	d000      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0xe4>
 80021c6:	e069      	b.n	800229c <HAL_ADC_ConfigChannel+0x1b8>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2240      	movs	r2, #64	@ 0x40
 80021ce:	4013      	ands	r3, r2
 80021d0:	d000      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0xf0>
 80021d2:	e061      	b.n	8002298 <HAL_ADC_ConfigChannel+0x1b4>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	4013      	ands	r3, r2
 80021dc:	d000      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0xfc>
 80021de:	e059      	b.n	8002294 <HAL_ADC_ConfigChannel+0x1b0>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d151      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1ac>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d149      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1a8>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4013      	ands	r3, r2
 8002202:	d141      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1a4>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	4013      	ands	r3, r2
 800220e:	d139      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1a0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	015b      	lsls	r3, r3, #5
 8002218:	4013      	ands	r3, r2
 800221a:	d131      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x19c>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	019b      	lsls	r3, r3, #6
 8002224:	4013      	ands	r3, r2
 8002226:	d129      	bne.n	800227c <HAL_ADC_ConfigChannel+0x198>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	01db      	lsls	r3, r3, #7
 8002230:	4013      	ands	r3, r2
 8002232:	d121      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x194>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	4013      	ands	r3, r2
 800223e:	d119      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x190>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	4013      	ands	r3, r2
 800224a:	d111      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x18c>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	029b      	lsls	r3, r3, #10
 8002254:	4013      	ands	r3, r2
 8002256:	d109      	bne.n	800226c <HAL_ADC_ConfigChannel+0x188>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	02db      	lsls	r3, r3, #11
 8002260:	4013      	ands	r3, r2
 8002262:	d001      	beq.n	8002268 <HAL_ADC_ConfigChannel+0x184>
 8002264:	2312      	movs	r3, #18
 8002266:	e024      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002268:	2300      	movs	r3, #0
 800226a:	e022      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 800226c:	2311      	movs	r3, #17
 800226e:	e020      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002270:	2310      	movs	r3, #16
 8002272:	e01e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002274:	230f      	movs	r3, #15
 8002276:	e01c      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002278:	230e      	movs	r3, #14
 800227a:	e01a      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 800227c:	230d      	movs	r3, #13
 800227e:	e018      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002280:	230c      	movs	r3, #12
 8002282:	e016      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002284:	230b      	movs	r3, #11
 8002286:	e014      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002288:	230a      	movs	r3, #10
 800228a:	e012      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 800228c:	2309      	movs	r3, #9
 800228e:	e010      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002290:	2308      	movs	r3, #8
 8002292:	e00e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002294:	2307      	movs	r3, #7
 8002296:	e00c      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002298:	2306      	movs	r3, #6
 800229a:	e00a      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 800229c:	2305      	movs	r3, #5
 800229e:	e008      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e006      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 80022a4:	2303      	movs	r3, #3
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e002      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ce>
 80022b0:	2300      	movs	r3, #0
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	6852      	ldr	r2, [r2, #4]
 80022b6:	201f      	movs	r0, #31
 80022b8:	4002      	ands	r2, r0
 80022ba:	4093      	lsls	r3, r2
 80022bc:	000a      	movs	r2, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d808      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	001a      	movs	r2, r3
 80022e2:	f7ff fa9b 	bl	800181c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	001a      	movs	r2, r3
 80022f4:	f7ff fae2 	bl	80018bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db00      	blt.n	8002302 <HAL_ADC_ConfigChannel+0x21e>
 8002300:	e0bc      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002302:	4b50      	ldr	r3, [pc, #320]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff fa37 	bl	8001778 <LL_ADC_GetCommonPathInternalCh>
 800230a:	0003      	movs	r3, r0
 800230c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4d      	ldr	r2, [pc, #308]	@ (8002448 <HAL_ADC_ConfigChannel+0x364>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d122      	bne.n	800235e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002320:	d11d      	bne.n	800235e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2280      	movs	r2, #128	@ 0x80
 8002326:	0412      	lsls	r2, r2, #16
 8002328:	4313      	orrs	r3, r2
 800232a:	4a46      	ldr	r2, [pc, #280]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 800232c:	0019      	movs	r1, r3
 800232e:	0010      	movs	r0, r2
 8002330:	f7ff fa0e 	bl	8001750 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002334:	4b45      	ldr	r3, [pc, #276]	@ (800244c <HAL_ADC_ConfigChannel+0x368>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4945      	ldr	r1, [pc, #276]	@ (8002450 <HAL_ADC_ConfigChannel+0x36c>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd fee2 	bl	8000104 <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	0013      	movs	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	189b      	adds	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800234e:	e002      	b.n	8002356 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800235c:	e08e      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3c      	ldr	r2, [pc, #240]	@ (8002454 <HAL_ADC_ConfigChannel+0x370>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d10e      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	045b      	lsls	r3, r3, #17
 800236e:	4013      	ands	r3, r2
 8002370:	d109      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	0452      	lsls	r2, r2, #17
 8002378:	4313      	orrs	r3, r2
 800237a:	4a32      	ldr	r2, [pc, #200]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 800237c:	0019      	movs	r1, r3
 800237e:	0010      	movs	r0, r2
 8002380:	f7ff f9e6 	bl	8001750 <LL_ADC_SetCommonPathInternalCh>
 8002384:	e07a      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a33      	ldr	r2, [pc, #204]	@ (8002458 <HAL_ADC_ConfigChannel+0x374>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d000      	beq.n	8002392 <HAL_ADC_ConfigChannel+0x2ae>
 8002390:	e074      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	03db      	lsls	r3, r3, #15
 8002398:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800239a:	d000      	beq.n	800239e <HAL_ADC_ConfigChannel+0x2ba>
 800239c:	e06e      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2280      	movs	r2, #128	@ 0x80
 80023a2:	03d2      	lsls	r2, r2, #15
 80023a4:	4313      	orrs	r3, r2
 80023a6:	4a27      	ldr	r2, [pc, #156]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 80023a8:	0019      	movs	r1, r3
 80023aa:	0010      	movs	r0, r2
 80023ac:	f7ff f9d0 	bl	8001750 <LL_ADC_SetCommonPathInternalCh>
 80023b0:	e064      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002440 <HAL_ADC_ConfigChannel+0x35c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0019      	movs	r1, r3
 80023d2:	0010      	movs	r0, r2
 80023d4:	f7ff fa53 	bl	800187e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da4d      	bge.n	800247c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff f9c8 	bl	8001778 <LL_ADC_GetCommonPathInternalCh>
 80023e8:	0003      	movs	r3, r0
 80023ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <HAL_ADC_ConfigChannel+0x364>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4a18      	ldr	r2, [pc, #96]	@ (800245c <HAL_ADC_ConfigChannel+0x378>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 80023fe:	0019      	movs	r1, r3
 8002400:	0010      	movs	r0, r2
 8002402:	f7ff f9a5 	bl	8001750 <LL_ADC_SetCommonPathInternalCh>
 8002406:	e039      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_ADC_ConfigChannel+0x370>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <HAL_ADC_ConfigChannel+0x37c>)
 8002416:	4013      	ands	r3, r2
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 800241a:	0019      	movs	r1, r3
 800241c:	0010      	movs	r0, r2
 800241e:	f7ff f997 	bl	8001750 <LL_ADC_SetCommonPathInternalCh>
 8002422:	e02b      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <HAL_ADC_ConfigChannel+0x374>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d126      	bne.n	800247c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4a0c      	ldr	r2, [pc, #48]	@ (8002464 <HAL_ADC_ConfigChannel+0x380>)
 8002432:	4013      	ands	r3, r2
 8002434:	4a03      	ldr	r2, [pc, #12]	@ (8002444 <HAL_ADC_ConfigChannel+0x360>)
 8002436:	0019      	movs	r1, r3
 8002438:	0010      	movs	r0, r2
 800243a:	f7ff f989 	bl	8001750 <LL_ADC_SetCommonPathInternalCh>
 800243e:	e01d      	b.n	800247c <HAL_ADC_ConfigChannel+0x398>
 8002440:	80000004 	.word	0x80000004
 8002444:	40012708 	.word	0x40012708
 8002448:	b0001000 	.word	0xb0001000
 800244c:	20000000 	.word	0x20000000
 8002450:	00030d40 	.word	0x00030d40
 8002454:	b8004000 	.word	0xb8004000
 8002458:	b4002000 	.word	0xb4002000
 800245c:	ff7fffff 	.word	0xff7fffff
 8002460:	feffffff 	.word	0xfeffffff
 8002464:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246c:	2220      	movs	r2, #32
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002474:	2317      	movs	r3, #23
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2254      	movs	r2, #84	@ 0x54
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002484:	2317      	movs	r3, #23
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b006      	add	sp, #24
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			@ (mov r8, r8)

08002494 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff fa71 	bl	800198c <LL_ADC_IsEnabled>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d000      	beq.n	80024b0 <ADC_Enable+0x1c>
 80024ae:	e069      	b.n	8002584 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a36      	ldr	r2, [pc, #216]	@ (8002590 <ADC_Enable+0xfc>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	2210      	movs	r2, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	2201      	movs	r2, #1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e056      	b.n	8002586 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff fa31 	bl	8001944 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80024e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002594 <ADC_Enable+0x100>)
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff f947 	bl	8001778 <LL_ADC_GetCommonPathInternalCh>
 80024ea:	0002      	movs	r2, r0
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	4013      	ands	r3, r2
 80024f2:	d00f      	beq.n	8002514 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f4:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <ADC_Enable+0x104>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4928      	ldr	r1, [pc, #160]	@ (800259c <ADC_Enable+0x108>)
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fd fe02 	bl	8000104 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002504:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002506:	e002      	b.n	800250e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f9      	bne.n	8002508 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e5b      	ldrb	r3, [r3, #25]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d033      	beq.n	8002584 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800251c:	f7ff f8d4 	bl	80016c8 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002524:	e027      	b.n	8002576 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff fa2e 	bl	800198c <LL_ADC_IsEnabled>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d104      	bne.n	800253e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff fa03 	bl	8001944 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800253e:	f7ff f8c3 	bl	80016c8 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d914      	bls.n	8002576 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	2b01      	cmp	r3, #1
 8002558:	d00d      	beq.n	8002576 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	2210      	movs	r2, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2201      	movs	r2, #1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e007      	b.n	8002586 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	2b01      	cmp	r3, #1
 8002582:	d1d0      	bne.n	8002526 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	80000017 	.word	0x80000017
 8002594:	40012708 	.word	0x40012708
 8002598:	20000000 	.word	0x20000000
 800259c:	00030d40 	.word	0x00030d40

080025a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff f9fe 	bl	80019ae <LL_ADC_IsDisableOngoing>
 80025b2:	0003      	movs	r3, r0
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff f9e6 	bl	800198c <LL_ADC_IsEnabled>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d046      	beq.n	8002652 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d143      	bne.n	8002652 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2205      	movs	r2, #5
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d10d      	bne.n	80025f4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff f9c3 	bl	8001968 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2203      	movs	r2, #3
 80025e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025ea:	f7ff f86d 	bl	80016c8 <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025f2:	e028      	b.n	8002646 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	2210      	movs	r2, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	2201      	movs	r2, #1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e021      	b.n	8002654 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002610:	f7ff f85a 	bl	80016c8 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d913      	bls.n	8002646 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	d00d      	beq.n	8002646 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	2210      	movs	r2, #16
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	2201      	movs	r2, #1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e006      	b.n	8002654 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2201      	movs	r2, #1
 800264e:	4013      	ands	r3, r2
 8002650:	d1de      	bne.n	8002610 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}

0800265c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	2250      	movs	r2, #80	@ 0x50
 8002670:	4013      	ands	r3, r2
 8002672:	d141      	bne.n	80026f8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff f8b7 	bl	80017fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d02e      	beq.n	80026ee <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	7e9b      	ldrb	r3, [r3, #26]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d12a      	bne.n	80026ee <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2208      	movs	r2, #8
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d123      	bne.n	80026ee <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff f9a2 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d110      	bne.n	80026d6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	210c      	movs	r1, #12
 80026c0:	438a      	bics	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <ADC_DMAConvCplt+0xc4>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	2201      	movs	r2, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80026d4:	e00b      	b.n	80026ee <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	2220      	movs	r2, #32
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	2201      	movs	r2, #1
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7fe fa35 	bl	8000b60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026f6:	e00f      	b.n	8002718 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	2210      	movs	r2, #16
 80026fe:	4013      	ands	r3, r2
 8002700:	d004      	beq.n	800270c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fce5 	bl	80020d4 <HAL_ADC_ErrorCallback>
}
 800270a:	e005      	b.n	8002718 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	0010      	movs	r0, r2
 8002716:	4798      	blx	r3
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fffffefe 	.word	0xfffffefe

08002724 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff fcbd 	bl	80020b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}

08002742 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	2240      	movs	r2, #64	@ 0x40
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	2204      	movs	r2, #4
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fcb2 	bl	80020d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}

08002778 <LL_ADC_GetCommonClock>:
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	23f0      	movs	r3, #240	@ 0xf0
 8002786:	039b      	lsls	r3, r3, #14
 8002788:	4013      	ands	r3, r2
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}

08002792 <LL_ADC_GetClock>:
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	0f9b      	lsrs	r3, r3, #30
 80027a0:	079b      	lsls	r3, r3, #30
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}

080027aa <LL_ADC_SetCalibrationFactor>:
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	22b4      	movs	r2, #180	@ 0xb4
 80027b8:	589b      	ldr	r3, [r3, r2]
 80027ba:	227f      	movs	r2, #127	@ 0x7f
 80027bc:	4393      	bics	r3, r2
 80027be:	001a      	movs	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	21b4      	movs	r1, #180	@ 0xb4
 80027c8:	505a      	str	r2, [r3, r1]
}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <LL_ADC_GetCalibrationFactor>:
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	22b4      	movs	r2, #180	@ 0xb4
 80027de:	589b      	ldr	r3, [r3, r2]
 80027e0:	227f      	movs	r2, #127	@ 0x7f
 80027e2:	4013      	ands	r3, r2
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}

080027ec <LL_ADC_Enable>:
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <LL_ADC_Enable+0x20>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	2201      	movs	r2, #1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}
 800280c:	7fffffe8 	.word	0x7fffffe8

08002810 <LL_ADC_Disable>:
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <LL_ADC_Disable+0x20>)
 800281e:	4013      	ands	r3, r2
 8002820:	2202      	movs	r2, #2
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}
 8002830:	7fffffe8 	.word	0x7fffffe8

08002834 <LL_ADC_IsEnabled>:
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <LL_ADC_IsEnabled+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_ADC_IsEnabled+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <LL_ADC_StartCalibration>:
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a05      	ldr	r2, [pc, #20]	@ (800287c <LL_ADC_StartCalibration+0x24>)
 8002866:	4013      	ands	r3, r2
 8002868:	2280      	movs	r2, #128	@ 0x80
 800286a:	0612      	lsls	r2, r2, #24
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]
}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	7fffffe8 	.word	0x7fffffe8

08002880 <LL_ADC_IsCalibrationOnGoing>:
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	0fdb      	lsrs	r3, r3, #31
 800288e:	07da      	lsls	r2, r3, #31
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	429a      	cmp	r2, r3
 8002896:	d101      	bne.n	800289c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08b      	sub	sp, #44	@ 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2254      	movs	r2, #84	@ 0x54
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0dd      	b.n	8002a82 <HAL_ADCEx_Calibration_Start+0x1da>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2254      	movs	r2, #84	@ 0x54
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80028ce:	231f      	movs	r3, #31
 80028d0:	18fc      	adds	r4, r7, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fe63 	bl	80025a0 <ADC_Disable>
 80028da:	0003      	movs	r3, r0
 80028dc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff ffa6 	bl	8002834 <LL_ADC_IsEnabled>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d000      	beq.n	80028ee <HAL_ADCEx_Calibration_Start+0x46>
 80028ec:	e0bc      	b.n	8002a68 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	4a66      	ldr	r2, [pc, #408]	@ (8002a8c <HAL_ADCEx_Calibration_Start+0x1e4>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	2202      	movs	r2, #2
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a62      	ldr	r2, [pc, #392]	@ (8002a90 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	495f      	ldr	r1, [pc, #380]	@ (8002a94 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002916:	400a      	ands	r2, r1
 8002918:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
 800291e:	e02d      	b.n	800297c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff ff97 	bl	8002858 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800292a:	e014      	b.n	8002956 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3301      	adds	r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a58      	ldr	r2, [pc, #352]	@ (8002a98 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d90d      	bls.n	8002956 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	2212      	movs	r2, #18
 8002940:	4393      	bics	r3, r2
 8002942:	2210      	movs	r2, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2254      	movs	r2, #84	@ 0x54
 800294e:	2100      	movs	r1, #0
 8002950:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e095      	b.n	8002a82 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff90 	bl	8002880 <LL_ADC_IsCalibrationOnGoing>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d1e3      	bne.n	800292c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff ff32 	bl	80027d2 <LL_ADC_GetCalibrationFactor>
 800296e:	0002      	movs	r2, r0
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	189b      	adds	r3, r3, r2
 8002974:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	2b07      	cmp	r3, #7
 8002980:	d9ce      	bls.n	8002920 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002982:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002984:	6a38      	ldr	r0, [r7, #32]
 8002986:	f7fd fbbd 	bl	8000104 <__udivsi3>
 800298a:	0003      	movs	r3, r0
 800298c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff2a 	bl	80027ec <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff fef8 	bl	8002792 <LL_ADC_GetClock>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d11b      	bne.n	80029de <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a6:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <HAL_ADCEx_Calibration_Start+0x1f4>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff fee5 	bl	8002778 <LL_ADC_GetCommonClock>
 80029ae:	0003      	movs	r3, r0
 80029b0:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	23e0      	movs	r3, #224	@ 0xe0
 80029b6:	035b      	lsls	r3, r3, #13
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d310      	bcc.n	80029de <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	0c9b      	lsrs	r3, r3, #18
 80029c0:	3b03      	subs	r3, #3
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	0013      	movs	r3, r2
 80029c8:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80029d0:	e002      	b.n	80029d8 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fedf 	bl	80027aa <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff ff0d 	bl	8002810 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029f6:	f7fe fe67 	bl	80016c8 <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029fe:	e01b      	b.n	8002a38 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a00:	f7fe fe62 	bl	80016c8 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d914      	bls.n	8002a38 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff ff0e 	bl	8002834 <LL_ADC_IsEnabled>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	2210      	movs	r2, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e024      	b.n	8002a82 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fef9 	bl	8002834 <LL_ADC_IsEnabled>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d1dc      	bne.n	8002a00 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	2201      	movs	r2, #1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a66:	e005      	b.n	8002a74 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2254      	movs	r2, #84	@ 0x54
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002a7c:	231f      	movs	r3, #31
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b00b      	add	sp, #44	@ 0x2c
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	fffffefd 	.word	0xfffffefd
 8002a90:	00008003 	.word	0x00008003
 8002a94:	ffff7ffc 	.word	0xffff7ffc
 8002a98:	0002f1ff 	.word	0x0002f1ff
 8002a9c:	40012708 	.word	0x40012708

08002aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002aa8:	46c0      	nop			@ (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ab8:	46c0      	nop			@ (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	1dfb      	adds	r3, r7, #7
 8002aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002af2:	d809      	bhi.n	8002b08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	001a      	movs	r2, r3
 8002afa:	231f      	movs	r3, #31
 8002afc:	401a      	ands	r2, r3
 8002afe:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <__NVIC_EnableIRQ+0x30>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b28:	d828      	bhi.n	8002b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <__NVIC_SetPriority+0xd4>)
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	33c0      	adds	r3, #192	@ 0xc0
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	589b      	ldr	r3, [r3, r2]
 8002b3a:	1dfa      	adds	r2, r7, #7
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	0011      	movs	r1, r2
 8002b40:	2203      	movs	r2, #3
 8002b42:	400a      	ands	r2, r1
 8002b44:	00d2      	lsls	r2, r2, #3
 8002b46:	21ff      	movs	r1, #255	@ 0xff
 8002b48:	4091      	lsls	r1, r2
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	43d2      	mvns	r2, r2
 8002b4e:	401a      	ands	r2, r3
 8002b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	22ff      	movs	r2, #255	@ 0xff
 8002b58:	401a      	ands	r2, r3
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	2303      	movs	r3, #3
 8002b62:	4003      	ands	r3, r0
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b68:	481f      	ldr	r0, [pc, #124]	@ (8002be8 <__NVIC_SetPriority+0xd4>)
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	430a      	orrs	r2, r1
 8002b74:	33c0      	adds	r3, #192	@ 0xc0
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b7a:	e031      	b.n	8002be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bec <__NVIC_SetPriority+0xd8>)
 8002b7e:	1dfb      	adds	r3, r7, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	0019      	movs	r1, r3
 8002b84:	230f      	movs	r3, #15
 8002b86:	400b      	ands	r3, r1
 8002b88:	3b08      	subs	r3, #8
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3306      	adds	r3, #6
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	3304      	adds	r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1dfa      	adds	r2, r7, #7
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	00d2      	lsls	r2, r2, #3
 8002ba2:	21ff      	movs	r1, #255	@ 0xff
 8002ba4:	4091      	lsls	r1, r2
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	43d2      	mvns	r2, r2
 8002baa:	401a      	ands	r2, r3
 8002bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	22ff      	movs	r2, #255	@ 0xff
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	4003      	ands	r3, r0
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bc4:	4809      	ldr	r0, [pc, #36]	@ (8002bec <__NVIC_SetPriority+0xd8>)
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	001c      	movs	r4, r3
 8002bcc:	230f      	movs	r3, #15
 8002bce:	4023      	ands	r3, r4
 8002bd0:	3b08      	subs	r3, #8
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	18c3      	adds	r3, r0, r3
 8002bdc:	3304      	adds	r3, #4
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b003      	add	sp, #12
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	1e5a      	subs	r2, r3, #1
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	045b      	lsls	r3, r3, #17
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d301      	bcc.n	8002c08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c04:	2301      	movs	r3, #1
 8002c06:	e010      	b.n	8002c2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c08:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <SysTick_Config+0x44>)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c10:	2301      	movs	r3, #1
 8002c12:	425b      	negs	r3, r3
 8002c14:	2103      	movs	r1, #3
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff ff7c 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <SysTick_Config+0x44>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <SysTick_Config+0x44>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	210f      	movs	r1, #15
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	1c02      	adds	r2, r0, #0
 8002c48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	0002      	movs	r2, r0
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff ff33 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ffaf 	bl	8002bf0 <SysTick_Config>
 8002c92:	0003      	movs	r3, r0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e091      	b.n	8002dd2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	4b49      	ldr	r3, [pc, #292]	@ (8002ddc <HAL_DMA_Init+0x140>)
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d810      	bhi.n	8002cdc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a48      	ldr	r2, [pc, #288]	@ (8002de0 <HAL_DMA_Init+0x144>)
 8002cc0:	4694      	mov	ip, r2
 8002cc2:	4463      	add	r3, ip
 8002cc4:	2114      	movs	r1, #20
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd fa1c 	bl	8000104 <__udivsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a43      	ldr	r2, [pc, #268]	@ (8002de4 <HAL_DMA_Init+0x148>)
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cda:	e00f      	b.n	8002cfc <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a41      	ldr	r2, [pc, #260]	@ (8002de8 <HAL_DMA_Init+0x14c>)
 8002ce2:	4694      	mov	ip, r2
 8002ce4:	4463      	add	r3, ip
 8002ce6:	2114      	movs	r1, #20
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fd fa0b 	bl	8000104 <__udivsi3>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dec <HAL_DMA_Init+0x150>)
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2225      	movs	r2, #37	@ 0x25
 8002d00:	2102      	movs	r1, #2
 8002d02:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4938      	ldr	r1, [pc, #224]	@ (8002df0 <HAL_DMA_Init+0x154>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 f9d7 	bl	8003100 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	01db      	lsls	r3, r3, #7
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d102      	bne.n	8002d64 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6c:	217f      	movs	r1, #127	@ 0x7f
 8002d6e:	400a      	ands	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_DMA_Init+0x10c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d80d      	bhi.n	8002da8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 fa00 	bl	8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	e008      	b.n	8002dba <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2225      	movs	r2, #37	@ 0x25
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	@ 0x24
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	40020407 	.word	0x40020407
 8002de0:	bffdfff8 	.word	0xbffdfff8
 8002de4:	40020000 	.word	0x40020000
 8002de8:	bffdfbf8 	.word	0xbffdfbf8
 8002dec:	40020400 	.word	0x40020400
 8002df0:	ffff800f 	.word	0xffff800f

08002df4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2317      	movs	r3, #23
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2224      	movs	r2, #36	@ 0x24
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_DMA_Start_IT+0x24>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e06f      	b.n	8002ef8 <HAL_DMA_Start_IT+0x104>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2225      	movs	r2, #37	@ 0x25
 8002e24:	5c9b      	ldrb	r3, [r3, r2]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d157      	bne.n	8002edc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2225      	movs	r2, #37	@ 0x25
 8002e30:	2102      	movs	r1, #2
 8002e32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	438a      	bics	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f919 	bl	8003088 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	210e      	movs	r1, #14
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00f      	b.n	8002e90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	210a      	movs	r1, #10
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	025b      	lsls	r3, r3, #9
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea8:	2180      	movs	r1, #128	@ 0x80
 8002eaa:	0049      	lsls	r1, r1, #1
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	2180      	movs	r1, #128	@ 0x80
 8002ec4:	0049      	lsls	r1, r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e00a      	b.n	8002ef2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2224      	movs	r2, #36	@ 0x24
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002eea:	2317      	movs	r3, #23
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002ef2:	2317      	movs	r3, #23
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b006      	add	sp, #24
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1c:	221c      	movs	r2, #28
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2204      	movs	r2, #4
 8002f22:	409a      	lsls	r2, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d026      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x7a>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4013      	ands	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	221c      	movs	r2, #28
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	4091      	lsls	r1, r2
 8002f60:	000a      	movs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d100      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x6e>
 8002f6c:	e080      	b.n	8003070 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	0010      	movs	r0, r2
 8002f76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002f78:	e07a      	b.n	8003070 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	221c      	movs	r2, #28
 8002f80:	4013      	ands	r3, r2
 8002f82:	2202      	movs	r2, #2
 8002f84:	409a      	lsls	r2, r3
 8002f86:	0013      	movs	r3, r2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d03c      	beq.n	8003008 <HAL_DMA_IRQHandler+0x108>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d038      	beq.n	8003008 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d10b      	bne.n	8002fba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	210a      	movs	r1, #10
 8002fae:	438a      	bics	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2225      	movs	r2, #37	@ 0x25
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800307c <HAL_DMA_IRQHandler+0x17c>)
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d909      	bls.n	8002fda <HAL_DMA_IRQHandler+0xda>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	221c      	movs	r2, #28
 8002fcc:	401a      	ands	r2, r3
 8002fce:	4b2c      	ldr	r3, [pc, #176]	@ (8003080 <HAL_DMA_IRQHandler+0x180>)
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4091      	lsls	r1, r2
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	e008      	b.n	8002fec <HAL_DMA_IRQHandler+0xec>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	221c      	movs	r2, #28
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <HAL_DMA_IRQHandler+0x184>)
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4091      	lsls	r1, r2
 8002fe8:	000a      	movs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d039      	beq.n	8003070 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	0010      	movs	r0, r2
 8003004:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003006:	e033      	b.n	8003070 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	221c      	movs	r2, #28
 800300e:	4013      	ands	r3, r2
 8003010:	2208      	movs	r2, #8
 8003012:	409a      	lsls	r2, r3
 8003014:	0013      	movs	r3, r2
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	d02a      	beq.n	8003072 <HAL_DMA_IRQHandler+0x172>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2208      	movs	r2, #8
 8003020:	4013      	ands	r3, r2
 8003022:	d026      	beq.n	8003072 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	210e      	movs	r1, #14
 8003030:	438a      	bics	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	221c      	movs	r2, #28
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	2101      	movs	r1, #1
 8003042:	4091      	lsls	r1, r2
 8003044:	000a      	movs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2225      	movs	r2, #37	@ 0x25
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2224      	movs	r2, #36	@ 0x24
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	0010      	movs	r0, r2
 800306e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46c0      	nop			@ (mov r8, r8)
}
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	40020080 	.word	0x40020080
 8003080:	40020400 	.word	0x40020400
 8003084:	40020000 	.word	0x40020000

08003088 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800309e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	221c      	movs	r2, #28
 80030b8:	401a      	ands	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	2101      	movs	r1, #1
 80030c0:	4091      	lsls	r1, r2
 80030c2:	000a      	movs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d108      	bne.n	80030e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030e6:	e007      	b.n	80030f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}

08003100 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	001a      	movs	r2, r3
 800310e:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003110:	429a      	cmp	r2, r3
 8003112:	d814      	bhi.n	800313e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4a1a      	ldr	r2, [pc, #104]	@ (8003188 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800311e:	189a      	adds	r2, r3, r2
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	23ff      	movs	r3, #255	@ 0xff
 800312c:	4013      	ands	r3, r2
 800312e:	3b08      	subs	r3, #8
 8003130:	2114      	movs	r1, #20
 8003132:	0018      	movs	r0, r3
 8003134:	f7fc ffe6 	bl	8000104 <__udivsi3>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e014      	b.n	8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a11      	ldr	r2, [pc, #68]	@ (800318c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003148:	189a      	adds	r2, r3, r2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	001a      	movs	r2, r3
 8003154:	23ff      	movs	r3, #255	@ 0xff
 8003156:	4013      	ands	r3, r2
 8003158:	3b08      	subs	r3, #8
 800315a:	2114      	movs	r1, #20
 800315c:	0018      	movs	r0, r3
 800315e:	f7fc ffd1 	bl	8000104 <__udivsi3>
 8003162:	0003      	movs	r3, r0
 8003164:	3307      	adds	r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a09      	ldr	r2, [pc, #36]	@ (8003190 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800316c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	221f      	movs	r2, #31
 8003172:	4013      	ands	r3, r2
 8003174:	2201      	movs	r2, #1
 8003176:	409a      	lsls	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b004      	add	sp, #16
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40020407 	.word	0x40020407
 8003188:	40020800 	.word	0x40020800
 800318c:	4002081c 	.word	0x4002081c
 8003190:	40020880 	.word	0x40020880

08003194 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	227f      	movs	r2, #127	@ 0x7f
 80031a2:	4013      	ands	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	@ (80031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031aa:	4694      	mov	ip, r2
 80031ac:	4463      	add	r3, ip
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	001a      	movs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3b01      	subs	r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	4013      	ands	r3, r2
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	1000823f 	.word	0x1000823f
 80031d8:	40020940 	.word	0x40020940

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e14d      	b.n	8003488 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4091      	lsls	r1, r2
 80031f6:	000a      	movs	r2, r1
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d100      	bne.n	8003204 <HAL_GPIO_Init+0x28>
 8003202:	e13e      	b.n	8003482 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	4013      	ands	r3, r2
 800320c:	2b01      	cmp	r3, #1
 800320e:	d005      	beq.n	800321c <HAL_GPIO_Init+0x40>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	4013      	ands	r3, r2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d130      	bne.n	800327e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	409a      	lsls	r2, r3
 800322a:	0013      	movs	r3, r2
 800322c:	43da      	mvns	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	409a      	lsls	r2, r3
 800323e:	0013      	movs	r3, r2
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003252:	2201      	movs	r2, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
 8003258:	0013      	movs	r3, r2
 800325a:	43da      	mvns	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	2201      	movs	r2, #1
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2203      	movs	r2, #3
 8003284:	4013      	ands	r3, r2
 8003286:	2b03      	cmp	r3, #3
 8003288:	d017      	beq.n	80032ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	409a      	lsls	r2, r3
 8003298:	0013      	movs	r3, r2
 800329a:	43da      	mvns	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d123      	bne.n	800330e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	58d3      	ldr	r3, [r2, r3]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2207      	movs	r2, #7
 80032d8:	4013      	ands	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2107      	movs	r1, #7
 80032f2:	400b      	ands	r3, r1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	08da      	lsrs	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	6939      	ldr	r1, [r7, #16]
 800330c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	409a      	lsls	r2, r3
 800331c:	0013      	movs	r3, r2
 800331e:	43da      	mvns	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	401a      	ands	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	23c0      	movs	r3, #192	@ 0xc0
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	4013      	ands	r3, r2
 800334c:	d100      	bne.n	8003350 <HAL_GPIO_Init+0x174>
 800334e:	e098      	b.n	8003482 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003350:	4a53      	ldr	r2, [pc, #332]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3318      	adds	r3, #24
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	589b      	ldr	r3, [r3, r2]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2203      	movs	r2, #3
 8003362:	4013      	ands	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	220f      	movs	r2, #15
 8003368:	409a      	lsls	r2, r3
 800336a:	0013      	movs	r3, r2
 800336c:	43da      	mvns	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	23a0      	movs	r3, #160	@ 0xa0
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	429a      	cmp	r2, r3
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x1d6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a48      	ldr	r2, [pc, #288]	@ (80034a4 <HAL_GPIO_Init+0x2c8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x1d2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a47      	ldr	r2, [pc, #284]	@ (80034a8 <HAL_GPIO_Init+0x2cc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x1ce>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a46      	ldr	r2, [pc, #280]	@ (80034ac <HAL_GPIO_Init+0x2d0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x1ca>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a45      	ldr	r2, [pc, #276]	@ (80034b0 <HAL_GPIO_Init+0x2d4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x1c6>
 800339e:	2304      	movs	r3, #4
 80033a0:	e008      	b.n	80033b4 <HAL_GPIO_Init+0x1d8>
 80033a2:	2305      	movs	r3, #5
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x1d8>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e004      	b.n	80033b4 <HAL_GPIO_Init+0x1d8>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_Init+0x1d8>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_GPIO_Init+0x1d8>
 80033b2:	2300      	movs	r3, #0
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	2103      	movs	r1, #3
 80033b8:	400a      	ands	r2, r1
 80033ba:	00d2      	lsls	r2, r2, #3
 80033bc:	4093      	lsls	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80033c4:	4936      	ldr	r1, [pc, #216]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3318      	adds	r3, #24
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d2:	4b33      	ldr	r3, [pc, #204]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43da      	mvns	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	035b      	lsls	r3, r3, #13
 80033ea:	4013      	ands	r3, r2
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f6:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43da      	mvns	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	039b      	lsls	r3, r3, #14
 8003414:	4013      	ands	r3, r2
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003420:	4b1f      	ldr	r3, [pc, #124]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003426:	4a1e      	ldr	r2, [pc, #120]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 8003428:	2384      	movs	r3, #132	@ 0x84
 800342a:	58d3      	ldr	r3, [r2, r3]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43da      	mvns	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	4013      	ands	r3, r2
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800344c:	4914      	ldr	r1, [pc, #80]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 800344e:	2284      	movs	r2, #132	@ 0x84
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003454:	4a12      	ldr	r2, [pc, #72]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	58d3      	ldr	r3, [r2, r3]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43da      	mvns	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	025b      	lsls	r3, r3, #9
 800346e:	4013      	ands	r3, r2
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800347a:	4909      	ldr	r1, [pc, #36]	@ (80034a0 <HAL_GPIO_Init+0x2c4>)
 800347c:	2280      	movs	r2, #128	@ 0x80
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	40da      	lsrs	r2, r3
 8003490:	1e13      	subs	r3, r2, #0
 8003492:	d000      	beq.n	8003496 <HAL_GPIO_Init+0x2ba>
 8003494:	e6aa      	b.n	80031ec <HAL_GPIO_Init+0x10>
  }
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b006      	add	sp, #24
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021800 	.word	0x40021800
 80034a4:	50000400 	.word	0x50000400
 80034a8:	50000800 	.word	0x50000800
 80034ac:	50000c00 	.word	0x50000c00
 80034b0:	50001000 	.word	0x50001000

080034b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	0008      	movs	r0, r1
 80034be:	0011      	movs	r1, r2
 80034c0:	1cbb      	adds	r3, r7, #2
 80034c2:	1c02      	adds	r2, r0, #0
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	1c7b      	adds	r3, r7, #1
 80034c8:	1c0a      	adds	r2, r1, #0
 80034ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034cc:	1c7b      	adds	r3, r7, #1
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d4:	1cbb      	adds	r3, r7, #2
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034de:	1cbb      	adds	r3, r7, #2
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d11f      	bne.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003514:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	0013      	movs	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	189b      	adds	r3, r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4912      	ldr	r1, [pc, #72]	@ (800356c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003522:	0018      	movs	r0, r3
 8003524:	f7fc fdee 	bl	8000104 <__udivsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800352e:	e008      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3b01      	subs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e001      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e009      	b.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	401a      	ands	r2, r3
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	429a      	cmp	r2, r3
 8003552:	d0ed      	beq.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	40007000 	.word	0x40007000
 8003564:	fffff9ff 	.word	0xfffff9ff
 8003568:	20000000 	.word	0x20000000
 800356c:	000f4240 	.word	0x000f4240

08003570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f000 fb50 	bl	8003c24 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d100      	bne.n	8003590 <HAL_RCC_OscConfig+0x20>
 800358e:	e07c      	b.n	800368a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	4bc3      	ldr	r3, [pc, #780]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2238      	movs	r2, #56	@ 0x38
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800359a:	4bc1      	ldr	r3, [pc, #772]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2203      	movs	r2, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d102      	bne.n	80035b0 <HAL_RCC_OscConfig+0x40>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d002      	beq.n	80035b6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d10b      	bne.n	80035ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b6:	4bba      	ldr	r3, [pc, #744]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	029b      	lsls	r3, r3, #10
 80035be:	4013      	ands	r3, r2
 80035c0:	d062      	beq.n	8003688 <HAL_RCC_OscConfig+0x118>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d15e      	bne.n	8003688 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e32a      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	025b      	lsls	r3, r3, #9
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_OscConfig+0x7a>
 80035da:	4bb1      	ldr	r3, [pc, #708]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4bb0      	ldr	r3, [pc, #704]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	0249      	lsls	r1, r1, #9
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e020      	b.n	800362c <HAL_RCC_OscConfig+0xbc>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	23a0      	movs	r3, #160	@ 0xa0
 80035f0:	02db      	lsls	r3, r3, #11
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d10e      	bne.n	8003614 <HAL_RCC_OscConfig+0xa4>
 80035f6:	4baa      	ldr	r3, [pc, #680]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4ba9      	ldr	r3, [pc, #676]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80035fc:	2180      	movs	r1, #128	@ 0x80
 80035fe:	02c9      	lsls	r1, r1, #11
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4ba6      	ldr	r3, [pc, #664]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4ba5      	ldr	r3, [pc, #660]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800360a:	2180      	movs	r1, #128	@ 0x80
 800360c:	0249      	lsls	r1, r1, #9
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xbc>
 8003614:	4ba2      	ldr	r3, [pc, #648]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4ba1      	ldr	r3, [pc, #644]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800361a:	49a2      	ldr	r1, [pc, #648]	@ (80038a4 <HAL_RCC_OscConfig+0x334>)
 800361c:	400a      	ands	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	4b9f      	ldr	r3, [pc, #636]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b9e      	ldr	r3, [pc, #632]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003626:	49a0      	ldr	r1, [pc, #640]	@ (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d014      	beq.n	800365e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f848 	bl	80016c8 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363e:	f7fe f843 	bl	80016c8 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b64      	cmp	r3, #100	@ 0x64
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e2e9      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003650:	4b93      	ldr	r3, [pc, #588]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	4013      	ands	r3, r2
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0xce>
 800365c:	e015      	b.n	800368a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe f833 	bl	80016c8 <HAL_GetTick>
 8003662:	0003      	movs	r3, r0
 8003664:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe f82e 	bl	80016c8 <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e2d4      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800367a:	4b89      	ldr	r3, [pc, #548]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	029b      	lsls	r3, r3, #10
 8003682:	4013      	ands	r3, r2
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xf8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	d100      	bne.n	8003696 <HAL_RCC_OscConfig+0x126>
 8003694:	e099      	b.n	80037ca <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	4b82      	ldr	r3, [pc, #520]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2238      	movs	r2, #56	@ 0x38
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a0:	4b7f      	ldr	r3, [pc, #508]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2203      	movs	r2, #3
 80036a6:	4013      	ands	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_OscConfig+0x146>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d135      	bne.n	8003728 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036bc:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4013      	ands	r3, r2
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_OscConfig+0x164>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e2a7      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b72      	ldr	r3, [pc, #456]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a74      	ldr	r2, [pc, #464]	@ (80038ac <HAL_RCC_OscConfig+0x33c>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	4b6e      	ldr	r3, [pc, #440]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d112      	bne.n	8003716 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036f0:	4b6b      	ldr	r3, [pc, #428]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6e      	ldr	r2, [pc, #440]	@ (80038b0 <HAL_RCC_OscConfig+0x340>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	4b68      	ldr	r3, [pc, #416]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003704:	4b66      	ldr	r3, [pc, #408]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0adb      	lsrs	r3, r3, #11
 800370a:	2207      	movs	r2, #7
 800370c:	4013      	ands	r3, r2
 800370e:	4a69      	ldr	r2, [pc, #420]	@ (80038b4 <HAL_RCC_OscConfig+0x344>)
 8003710:	40da      	lsrs	r2, r3
 8003712:	4b69      	ldr	r3, [pc, #420]	@ (80038b8 <HAL_RCC_OscConfig+0x348>)
 8003714:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003716:	4b69      	ldr	r3, [pc, #420]	@ (80038bc <HAL_RCC_OscConfig+0x34c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0018      	movs	r0, r3
 800371c:	f7fd ff78 	bl	8001610 <HAL_InitTick>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d051      	beq.n	80037c8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e27d      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d030      	beq.n	8003792 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003730:	4b5b      	ldr	r3, [pc, #364]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5e      	ldr	r2, [pc, #376]	@ (80038b0 <HAL_RCC_OscConfig+0x340>)
 8003736:	4013      	ands	r3, r2
 8003738:	0019      	movs	r1, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	4b58      	ldr	r3, [pc, #352]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003744:	4b56      	ldr	r3, [pc, #344]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b55      	ldr	r3, [pc, #340]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800374a:	2180      	movs	r1, #128	@ 0x80
 800374c:	0049      	lsls	r1, r1, #1
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fd ffb9 	bl	80016c8 <HAL_GetTick>
 8003756:	0003      	movs	r3, r0
 8003758:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fd ffb4 	bl	80016c8 <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e25a      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376e:	4b4c      	ldr	r3, [pc, #304]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4013      	ands	r3, r2
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a4b      	ldr	r2, [pc, #300]	@ (80038ac <HAL_RCC_OscConfig+0x33c>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	4b45      	ldr	r3, [pc, #276]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b42      	ldr	r3, [pc, #264]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003798:	4949      	ldr	r1, [pc, #292]	@ (80038c0 <HAL_RCC_OscConfig+0x350>)
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fd ff93 	bl	80016c8 <HAL_GetTick>
 80037a2:	0003      	movs	r3, r0
 80037a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a8:	f7fd ff8e 	bl	80016c8 <HAL_GetTick>
 80037ac:	0002      	movs	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e234      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ba:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4013      	ands	r3, r2
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x238>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2208      	movs	r2, #8
 80037d0:	4013      	ands	r3, r2
 80037d2:	d047      	beq.n	8003864 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037d4:	4b32      	ldr	r3, [pc, #200]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2238      	movs	r2, #56	@ 0x38
 80037da:	4013      	ands	r3, r2
 80037dc:	2b18      	cmp	r3, #24
 80037de:	d10a      	bne.n	80037f6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80037e0:	4b2f      	ldr	r3, [pc, #188]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	2202      	movs	r2, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	d03c      	beq.n	8003864 <HAL_RCC_OscConfig+0x2f4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d138      	bne.n	8003864 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e216      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80037fe:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003800:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003804:	2101      	movs	r1, #1
 8003806:	430a      	orrs	r2, r1
 8003808:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd ff5d 	bl	80016c8 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003814:	f7fd ff58 	bl	80016c8 <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1fe      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	2202      	movs	r2, #2
 800382c:	4013      	ands	r3, r2
 800382e:	d0f1      	beq.n	8003814 <HAL_RCC_OscConfig+0x2a4>
 8003830:	e018      	b.n	8003864 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003832:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003834:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003836:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003838:	2101      	movs	r1, #1
 800383a:	438a      	bics	r2, r1
 800383c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd ff43 	bl	80016c8 <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003848:	f7fd ff3e 	bl	80016c8 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1e4      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800385a:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	d1f1      	bne.n	8003848 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2204      	movs	r2, #4
 800386a:	4013      	ands	r3, r2
 800386c:	d100      	bne.n	8003870 <HAL_RCC_OscConfig+0x300>
 800386e:	e0c7      	b.n	8003a00 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003870:	231f      	movs	r3, #31
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2238      	movs	r2, #56	@ 0x38
 800387e:	4013      	ands	r3, r2
 8003880:	2b20      	cmp	r3, #32
 8003882:	d11f      	bne.n	80038c4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x330>)
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	2202      	movs	r2, #2
 800388a:	4013      	ands	r3, r2
 800388c:	d100      	bne.n	8003890 <HAL_RCC_OscConfig+0x320>
 800388e:	e0b7      	b.n	8003a00 <HAL_RCC_OscConfig+0x490>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d000      	beq.n	800389a <HAL_RCC_OscConfig+0x32a>
 8003898:	e0b2      	b.n	8003a00 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1c2      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	40021000 	.word	0x40021000
 80038a4:	fffeffff 	.word	0xfffeffff
 80038a8:	fffbffff 	.word	0xfffbffff
 80038ac:	ffff80ff 	.word	0xffff80ff
 80038b0:	ffffc7ff 	.word	0xffffc7ff
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000004 	.word	0x20000004
 80038c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038c4:	4bb5      	ldr	r3, [pc, #724]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80038c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	055b      	lsls	r3, r3, #21
 80038cc:	4013      	ands	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x364>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x366>
 80038d4:	2300      	movs	r3, #0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d011      	beq.n	80038fe <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	4bb0      	ldr	r3, [pc, #704]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80038dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038de:	4baf      	ldr	r3, [pc, #700]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80038e0:	2180      	movs	r1, #128	@ 0x80
 80038e2:	0549      	lsls	r1, r1, #21
 80038e4:	430a      	orrs	r2, r1
 80038e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038e8:	4bac      	ldr	r3, [pc, #688]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80038ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	055b      	lsls	r3, r3, #21
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80038f6:	231f      	movs	r3, #31
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4ba8      	ldr	r3, [pc, #672]	@ (8003ba0 <HAL_RCC_OscConfig+0x630>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4013      	ands	r3, r2
 8003908:	d11a      	bne.n	8003940 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390a:	4ba5      	ldr	r3, [pc, #660]	@ (8003ba0 <HAL_RCC_OscConfig+0x630>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4ba4      	ldr	r3, [pc, #656]	@ (8003ba0 <HAL_RCC_OscConfig+0x630>)
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	0049      	lsls	r1, r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003918:	f7fd fed6 	bl	80016c8 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fd fed1 	bl	80016c8 <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e177      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003934:	4b9a      	ldr	r3, [pc, #616]	@ (8003ba0 <HAL_RCC_OscConfig+0x630>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4013      	ands	r3, r2
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x3e6>
 8003948:	4b94      	ldr	r3, [pc, #592]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 800394a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800394c:	4b93      	ldr	r3, [pc, #588]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 800394e:	2101      	movs	r1, #1
 8003950:	430a      	orrs	r2, r1
 8003952:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003954:	e01c      	b.n	8003990 <HAL_RCC_OscConfig+0x420>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x408>
 800395e:	4b8f      	ldr	r3, [pc, #572]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003962:	4b8e      	ldr	r3, [pc, #568]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003964:	2104      	movs	r1, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	65da      	str	r2, [r3, #92]	@ 0x5c
 800396a:	4b8c      	ldr	r3, [pc, #560]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 800396c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800396e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003970:	2101      	movs	r1, #1
 8003972:	430a      	orrs	r2, r1
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0x420>
 8003978:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 800397a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800397c:	4b87      	ldr	r3, [pc, #540]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 800397e:	2101      	movs	r1, #1
 8003980:	438a      	bics	r2, r1
 8003982:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003984:	4b85      	ldr	r3, [pc, #532]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003986:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003988:	4b84      	ldr	r3, [pc, #528]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 800398a:	2104      	movs	r1, #4
 800398c:	438a      	bics	r2, r1
 800398e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fe96 	bl	80016c8 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a0:	e009      	b.n	80039b6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fd fe91 	bl	80016c8 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <HAL_RCC_OscConfig+0x634>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e136      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b6:	4b79      	ldr	r3, [pc, #484]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80039b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x432>
 80039c0:	e013      	b.n	80039ea <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fd fe81 	bl	80016c8 <HAL_GetTick>
 80039c6:	0003      	movs	r3, r0
 80039c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ca:	e009      	b.n	80039e0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039cc:	f7fd fe7c 	bl	80016c8 <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	4a73      	ldr	r2, [pc, #460]	@ (8003ba4 <HAL_RCC_OscConfig+0x634>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e121      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	4b6e      	ldr	r3, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039ea:	231f      	movs	r3, #31
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039f4:	4b69      	ldr	r3, [pc, #420]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80039f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f8:	4b68      	ldr	r3, [pc, #416]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 80039fa:	496b      	ldr	r1, [pc, #428]	@ (8003ba8 <HAL_RCC_OscConfig+0x638>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2220      	movs	r2, #32
 8003a06:	4013      	ands	r3, r2
 8003a08:	d039      	beq.n	8003a7e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a12:	4b62      	ldr	r3, [pc, #392]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a18:	2180      	movs	r1, #128	@ 0x80
 8003a1a:	03c9      	lsls	r1, r1, #15
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fe52 	bl	80016c8 <HAL_GetTick>
 8003a24:	0003      	movs	r3, r0
 8003a26:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2a:	f7fd fe4d 	bl	80016c8 <HAL_GetTick>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e0f3      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a3c:	4b57      	ldr	r3, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	4013      	ands	r3, r2
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x4ba>
 8003a48:	e019      	b.n	8003a7e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4a:	4b54      	ldr	r3, [pc, #336]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a50:	4956      	ldr	r1, [pc, #344]	@ (8003bac <HAL_RCC_OscConfig+0x63c>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a56:	f7fd fe37 	bl	80016c8 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fd fe32 	bl	80016c8 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0d8      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a72:	4b4a      	ldr	r3, [pc, #296]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	2380      	movs	r3, #128	@ 0x80
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d100      	bne.n	8003a88 <HAL_RCC_OscConfig+0x518>
 8003a86:	e0cc      	b.n	8003c22 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a88:	4b44      	ldr	r3, [pc, #272]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2238      	movs	r2, #56	@ 0x38
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d100      	bne.n	8003a96 <HAL_RCC_OscConfig+0x526>
 8003a94:	e07b      	b.n	8003b8e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d156      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003aa4:	4942      	ldr	r1, [pc, #264]	@ (8003bb0 <HAL_RCC_OscConfig+0x640>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fe0d 	bl	80016c8 <HAL_GetTick>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fd fe08 	bl	80016c8 <HAL_GetTick>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0ae      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac6:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	049b      	lsls	r3, r3, #18
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad2:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	@ (8003bb4 <HAL_RCC_OscConfig+0x644>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	431a      	orrs	r2, r3
 8003b00:	4b26      	ldr	r3, [pc, #152]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b06:	4b25      	ldr	r3, [pc, #148]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	0449      	lsls	r1, r1, #17
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	4b20      	ldr	r3, [pc, #128]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b1a:	2180      	movs	r1, #128	@ 0x80
 8003b1c:	0549      	lsls	r1, r1, #21
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fd fdd1 	bl	80016c8 <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd fdcc 	bl	80016c8 <HAL_GetTick>
 8003b30:	0002      	movs	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e072      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	049b      	lsls	r3, r3, #18
 8003b46:	4013      	ands	r3, r2
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x5bc>
 8003b4a:	e06a      	b.n	8003c22 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b52:	4917      	ldr	r1, [pc, #92]	@ (8003bb0 <HAL_RCC_OscConfig+0x640>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fdb6 	bl	80016c8 <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fdb1 	bl	80016c8 <HAL_GetTick>
 8003b66:	0002      	movs	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e057      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	049b      	lsls	r3, r3, #18
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_RCC_OscConfig+0x62c>)
 8003b86:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <HAL_RCC_OscConfig+0x648>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	e049      	b.n	8003c22 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e044      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	00001388 	.word	0x00001388
 8003ba8:	efffffff 	.word	0xefffffff
 8003bac:	ffbfffff 	.word	0xffbfffff
 8003bb0:	feffffff 	.word	0xfeffffff
 8003bb4:	11c1808c 	.word	0x11c1808c
 8003bb8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x6bc>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d126      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2270      	movs	r2, #112	@ 0x70
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11f      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	23fe      	movs	r3, #254	@ 0xfe
 8003be2:	01db      	lsls	r3, r3, #7
 8003be4:	401a      	ands	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d116      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	23f8      	movs	r3, #248	@ 0xf8
 8003bf4:	039b      	lsls	r3, r3, #14
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d10e      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	23e0      	movs	r3, #224	@ 0xe0
 8003c04:	051b      	lsls	r3, r3, #20
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	0f5b      	lsrs	r3, r3, #29
 8003c14:	075a      	lsls	r2, r3, #29
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b008      	add	sp, #32
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0e9      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b76      	ldr	r3, [pc, #472]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2207      	movs	r2, #7
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d91e      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b73      	ldr	r3, [pc, #460]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2207      	movs	r2, #7
 8003c58:	4393      	bics	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	4b70      	ldr	r3, [pc, #448]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c64:	f7fd fd30 	bl	80016c8 <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c6c:	e009      	b.n	8003c82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6e:	f7fd fd2b 	bl	80016c8 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	4a6a      	ldr	r2, [pc, #424]	@ (8003e24 <HAL_RCC_ClockConfig+0x1f4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0ca      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c82:	4b67      	ldr	r3, [pc, #412]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2207      	movs	r2, #7
 8003c88:	4013      	ands	r3, r2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2202      	movs	r2, #2
 8003c96:	4013      	ands	r3, r2
 8003c98:	d015      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d006      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ca4:	4b60      	ldr	r3, [pc, #384]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003caa:	21e0      	movs	r1, #224	@ 0xe0
 8003cac:	01c9      	lsls	r1, r1, #7
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	@ (8003e2c <HAL_RCC_ClockConfig+0x1fc>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b59      	ldr	r3, [pc, #356]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d057      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd8:	4b53      	ldr	r3, [pc, #332]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	@ 0x80
 8003cde:	029b      	lsls	r3, r3, #10
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d12b      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e097      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	049b      	lsls	r3, r3, #18
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d11f      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e08b      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4013      	ands	r3, r2
 8003d12:	d113      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e07f      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d20:	4b41      	ldr	r3, [pc, #260]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d108      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e074      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e06d      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2207      	movs	r2, #7
 8003d42:	4393      	bics	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d50:	f7fd fcba 	bl	80016c8 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d58:	e009      	b.n	8003d6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5a:	f7fd fcb5 	bl	80016c8 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	4a2f      	ldr	r2, [pc, #188]	@ (8003e24 <HAL_RCC_ClockConfig+0x1f4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e054      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2238      	movs	r2, #56	@ 0x38
 8003d74:	401a      	ands	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1ec      	bne.n	8003d5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d80:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2207      	movs	r2, #7
 8003d86:	4013      	ands	r3, r2
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d21e      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2207      	movs	r2, #7
 8003d94:	4393      	bics	r3, r2
 8003d96:	0019      	movs	r1, r3
 8003d98:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003da0:	f7fd fc92 	bl	80016c8 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003da8:	e009      	b.n	8003dbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003daa:	f7fd fc8d 	bl	80016c8 <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e24 <HAL_RCC_ClockConfig+0x1f4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e02c      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dbe:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2207      	movs	r2, #7
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1ee      	bne.n	8003daa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd6:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <HAL_RCC_ClockConfig+0x200>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003dea:	f000 f829 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dee:	0001      	movs	r1, r0
 8003df0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f8>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	220f      	movs	r2, #15
 8003df8:	401a      	ands	r2, r3
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8003e34 <HAL_RCC_ClockConfig+0x204>)
 8003dfc:	0092      	lsls	r2, r2, #2
 8003dfe:	58d3      	ldr	r3, [r2, r3]
 8003e00:	221f      	movs	r2, #31
 8003e02:	4013      	ands	r3, r2
 8003e04:	000a      	movs	r2, r1
 8003e06:	40da      	lsrs	r2, r3
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_ClockConfig+0x208>)
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <HAL_RCC_ClockConfig+0x20c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fd fbfd 	bl	8001610 <HAL_InitTick>
 8003e16:	0003      	movs	r3, r0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40022000 	.word	0x40022000
 8003e24:	00001388 	.word	0x00001388
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	fffff0ff 	.word	0xfffff0ff
 8003e30:	ffff8fff 	.word	0xffff8fff
 8003e34:	080055d0 	.word	0x080055d0
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	20000004 	.word	0x20000004

08003e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e46:	4b3c      	ldr	r3, [pc, #240]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2238      	movs	r2, #56	@ 0x38
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d10f      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e50:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0adb      	lsrs	r3, r3, #11
 8003e56:	2207      	movs	r2, #7
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	0013      	movs	r3, r2
 8003e60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	4835      	ldr	r0, [pc, #212]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e66:	f7fc f94d 	bl	8000104 <__udivsi3>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e05d      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e70:	4b31      	ldr	r3, [pc, #196]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2238      	movs	r2, #56	@ 0x38
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e7c:	4b30      	ldr	r3, [pc, #192]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e054      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e82:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2238      	movs	r2, #56	@ 0x38
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d138      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e98:	4b27      	ldr	r3, [pc, #156]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	2207      	movs	r2, #7
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4824      	ldr	r0, [pc, #144]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x100>)
 8003eb0:	f7fc f928 	bl	8000104 <__udivsi3>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	227f      	movs	r2, #127	@ 0x7f
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	434b      	muls	r3, r1
 8003ec4:	617b      	str	r3, [r7, #20]
        break;
 8003ec6:	e00d      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	481c      	ldr	r0, [pc, #112]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ecc:	f7fc f91a 	bl	8000104 <__udivsi3>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	227f      	movs	r2, #127	@ 0x7f
 8003edc:	4013      	ands	r3, r2
 8003ede:	434b      	muls	r3, r1
 8003ee0:	617b      	str	r3, [r7, #20]
        break;
 8003ee2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0f5b      	lsrs	r3, r3, #29
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	3301      	adds	r3, #1
 8003ef0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	6978      	ldr	r0, [r7, #20]
 8003ef6:	f7fc f905 	bl	8000104 <__udivsi3>
 8003efa:	0003      	movs	r3, r0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	e015      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f00:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2238      	movs	r2, #56	@ 0x38
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d103      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f0c:	2380      	movs	r3, #128	@ 0x80
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f14:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2238      	movs	r2, #56	@ 0x38
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b18      	cmp	r3, #24
 8003f1e:	d103      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f20:	23fa      	movs	r3, #250	@ 0xfa
 8003f22:	01db      	lsls	r3, r3, #7
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e001      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f2c:	693b      	ldr	r3, [r7, #16]
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b006      	add	sp, #24
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f4c:	2313      	movs	r3, #19
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f54:	2312      	movs	r3, #18
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	2380      	movs	r3, #128	@ 0x80
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	4013      	ands	r3, r2
 8003f66:	d100      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f68:	e0ad      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2011      	movs	r0, #17
 8003f6c:	183b      	adds	r3, r7, r0
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	055b      	lsls	r3, r3, #21
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d110      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4b44      	ldr	r3, [pc, #272]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f82:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f84:	2180      	movs	r1, #128	@ 0x80
 8003f86:	0549      	lsls	r1, r1, #21
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f8c:	4b40      	ldr	r3, [pc, #256]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	055b      	lsls	r3, r3, #21
 8003f94:	4013      	ands	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	183b      	adds	r3, r7, r0
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003fa6:	2180      	movs	r1, #128	@ 0x80
 8003fa8:	0049      	lsls	r1, r1, #1
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fae:	f7fd fb8b 	bl	80016c8 <HAL_GetTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb8:	f7fd fb86 	bl	80016c8 <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d904      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003fc6:	2313      	movs	r3, #19
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	2203      	movs	r2, #3
 8003fcc:	701a      	strb	r2, [r3, #0]
        break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd0:	4b30      	ldr	r3, [pc, #192]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d0ed      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003fdc:	2313      	movs	r3, #19
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15e      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003fe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fea:	23c0      	movs	r3, #192	@ 0xc0
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d019      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d014      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004002:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004006:	4a24      	ldr	r2, [pc, #144]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400c:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800400e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004010:	4b1f      	ldr	r3, [pc, #124]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004012:	2180      	movs	r1, #128	@ 0x80
 8004014:	0249      	lsls	r1, r1, #9
 8004016:	430a      	orrs	r2, r1
 8004018:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800401c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004020:	491e      	ldr	r1, [pc, #120]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004022:	400a      	ands	r2, r1
 8004024:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004026:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2201      	movs	r2, #1
 8004030:	4013      	ands	r3, r2
 8004032:	d016      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fb48 	bl	80016c8 <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403c:	e00c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fd fb43 	bl	80016c8 <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	4a15      	ldr	r2, [pc, #84]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d904      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800404e:	2313      	movs	r3, #19
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2203      	movs	r2, #3
 8004054:	701a      	strb	r2, [r3, #0]
            break;
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004058:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800405a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405c:	2202      	movs	r2, #2
 800405e:	4013      	ands	r3, r2
 8004060:	d0ed      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004062:	2313      	movs	r3, #19
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406c:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	4a09      	ldr	r2, [pc, #36]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004072:	4013      	ands	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800407a:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800407c:	430a      	orrs	r2, r1
 800407e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004080:	e016      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004082:	2312      	movs	r3, #18
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2213      	movs	r2, #19
 8004088:	18ba      	adds	r2, r7, r2
 800408a:	7812      	ldrb	r2, [r2, #0]
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e00f      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004090:	40021000 	.word	0x40021000
 8004094:	40007000 	.word	0x40007000
 8004098:	fffffcff 	.word	0xfffffcff
 800409c:	fffeffff 	.word	0xfffeffff
 80040a0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	2312      	movs	r3, #18
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2213      	movs	r2, #19
 80040aa:	18ba      	adds	r2, r7, r2
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b0:	2311      	movs	r3, #17
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4bb6      	ldr	r3, [pc, #728]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040be:	4bb5      	ldr	r3, [pc, #724]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040c0:	49b5      	ldr	r1, [pc, #724]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80040c2:	400a      	ands	r2, r1
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d0:	4bb0      	ldr	r3, [pc, #704]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	2203      	movs	r2, #3
 80040d6:	4393      	bics	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	4bad      	ldr	r3, [pc, #692]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040e0:	430a      	orrs	r2, r1
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2202      	movs	r2, #2
 80040ea:	4013      	ands	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ee:	4ba9      	ldr	r3, [pc, #676]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f2:	220c      	movs	r2, #12
 80040f4:	4393      	bics	r3, r2
 80040f6:	0019      	movs	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	4ba5      	ldr	r3, [pc, #660]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040fe:	430a      	orrs	r2, r1
 8004100:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2204      	movs	r2, #4
 8004108:	4013      	ands	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800410c:	4ba1      	ldr	r3, [pc, #644]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800410e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004110:	2230      	movs	r2, #48	@ 0x30
 8004112:	4393      	bics	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	4b9e      	ldr	r3, [pc, #632]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800411c:	430a      	orrs	r2, r1
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800412a:	4b9a      	ldr	r3, [pc, #616]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800412c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412e:	4a9b      	ldr	r2, [pc, #620]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004130:	4013      	ands	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	4b96      	ldr	r3, [pc, #600]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800413a:	430a      	orrs	r2, r1
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	015b      	lsls	r3, r3, #5
 8004146:	4013      	ands	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800414a:	4b92      	ldr	r3, [pc, #584]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	4a94      	ldr	r2, [pc, #592]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004150:	4013      	ands	r3, r2
 8004152:	0019      	movs	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	4b8e      	ldr	r3, [pc, #568]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800415a:	430a      	orrs	r2, r1
 800415c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4013      	ands	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800416a:	4b8a      	ldr	r3, [pc, #552]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800416c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416e:	4a8d      	ldr	r2, [pc, #564]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004170:	4013      	ands	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004178:	4b86      	ldr	r3, [pc, #536]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800417a:	430a      	orrs	r2, r1
 800417c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4013      	ands	r3, r2
 8004188:	d009      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800418a:	4b82      	ldr	r3, [pc, #520]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	4a86      	ldr	r2, [pc, #536]	@ (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004190:	4013      	ands	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004198:	4b7e      	ldr	r3, [pc, #504]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800419a:	430a      	orrs	r2, r1
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2220      	movs	r2, #32
 80041a4:	4013      	ands	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a8:	4b7a      	ldr	r3, [pc, #488]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ac:	4a7f      	ldr	r2, [pc, #508]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	4b77      	ldr	r3, [pc, #476]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041b8:	430a      	orrs	r2, r1
 80041ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2240      	movs	r2, #64	@ 0x40
 80041c2:	4013      	ands	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c6:	4b73      	ldr	r3, [pc, #460]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	4a79      	ldr	r2, [pc, #484]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041d6:	430a      	orrs	r2, r1
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	01db      	lsls	r3, r3, #7
 80041e2:	4013      	ands	r3, r2
 80041e4:	d015      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	0899      	lsrs	r1, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f2:	4b68      	ldr	r3, [pc, #416]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041f4:	430a      	orrs	r2, r1
 80041f6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	05db      	lsls	r3, r3, #23
 8004200:	429a      	cmp	r2, r3
 8004202:	d106      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004204:	4b63      	ldr	r3, [pc, #396]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	4b62      	ldr	r3, [pc, #392]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	0249      	lsls	r1, r1, #9
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	4013      	ands	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800421e:	4b5d      	ldr	r3, [pc, #372]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004222:	2240      	movs	r2, #64	@ 0x40
 8004224:	4393      	bics	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800422c:	4b59      	ldr	r3, [pc, #356]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800422e:	430a      	orrs	r2, r1
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	039b      	lsls	r3, r3, #14
 800423a:	4013      	ands	r3, r2
 800423c:	d016      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800423e:	4b55      	ldr	r3, [pc, #340]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	4a5c      	ldr	r2, [pc, #368]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004244:	4013      	ands	r3, r2
 8004246:	0019      	movs	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424c:	4b51      	ldr	r3, [pc, #324]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800424e:	430a      	orrs	r2, r1
 8004250:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	03db      	lsls	r3, r3, #15
 800425a:	429a      	cmp	r2, r3
 800425c:	d106      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800425e:	4b4d      	ldr	r3, [pc, #308]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	4b4c      	ldr	r3, [pc, #304]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004264:	2180      	movs	r1, #128	@ 0x80
 8004266:	0449      	lsls	r1, r1, #17
 8004268:	430a      	orrs	r2, r1
 800426a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	03db      	lsls	r3, r3, #15
 8004274:	4013      	ands	r3, r2
 8004276:	d016      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004278:	4b46      	ldr	r3, [pc, #280]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	4a4e      	ldr	r2, [pc, #312]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800427e:	4013      	ands	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004286:	4b43      	ldr	r3, [pc, #268]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004288:	430a      	orrs	r2, r1
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	045b      	lsls	r3, r3, #17
 8004294:	429a      	cmp	r2, r3
 8004296:	d106      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004298:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	4b3d      	ldr	r3, [pc, #244]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800429e:	2180      	movs	r1, #128	@ 0x80
 80042a0:	0449      	lsls	r1, r1, #17
 80042a2:	430a      	orrs	r2, r1
 80042a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	2380      	movs	r3, #128	@ 0x80
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4013      	ands	r3, r2
 80042b0:	d014      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80042b2:	4b38      	ldr	r3, [pc, #224]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	2203      	movs	r2, #3
 80042b8:	4393      	bics	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042c2:	430a      	orrs	r2, r1
 80042c4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d106      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042ce:	4b31      	ldr	r3, [pc, #196]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b30      	ldr	r3, [pc, #192]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d4:	2180      	movs	r1, #128	@ 0x80
 80042d6:	0249      	lsls	r1, r1, #9
 80042d8:	430a      	orrs	r2, r1
 80042da:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	4013      	ands	r3, r2
 80042e6:	d014      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ec:	220c      	movs	r2, #12
 80042ee:	4393      	bics	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042f6:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	2b04      	cmp	r3, #4
 8004302:	d106      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004304:	4b23      	ldr	r3, [pc, #140]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4b22      	ldr	r3, [pc, #136]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800430a:	2180      	movs	r1, #128	@ 0x80
 800430c:	0249      	lsls	r1, r1, #9
 800430e:	430a      	orrs	r2, r1
 8004310:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	2380      	movs	r3, #128	@ 0x80
 8004318:	045b      	lsls	r3, r3, #17
 800431a:	4013      	ands	r3, r2
 800431c:	d016      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800431e:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800432e:	430a      	orrs	r2, r1
 8004330:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	429a      	cmp	r2, r3
 800433c:	d106      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b14      	ldr	r3, [pc, #80]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004344:	2180      	movs	r1, #128	@ 0x80
 8004346:	0449      	lsls	r1, r1, #17
 8004348:	430a      	orrs	r2, r1
 800434a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	049b      	lsls	r3, r3, #18
 8004354:	4013      	ands	r3, r2
 8004356:	d016      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004358:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435c:	4a10      	ldr	r2, [pc, #64]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004368:	430a      	orrs	r2, r1
 800436a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004370:	2380      	movs	r3, #128	@ 0x80
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	429a      	cmp	r2, r3
 8004376:	d106      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800437e:	2180      	movs	r1, #128	@ 0x80
 8004380:	0449      	lsls	r1, r1, #17
 8004382:	430a      	orrs	r2, r1
 8004384:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004386:	2312      	movs	r3, #18
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	781b      	ldrb	r3, [r3, #0]
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b006      	add	sp, #24
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	efffffff 	.word	0xefffffff
 800439c:	fffff3ff 	.word	0xfffff3ff
 80043a0:	fffffcff 	.word	0xfffffcff
 80043a4:	fff3ffff 	.word	0xfff3ffff
 80043a8:	ffcfffff 	.word	0xffcfffff
 80043ac:	ffffcfff 	.word	0xffffcfff
 80043b0:	ffff3fff 	.word	0xffff3fff
 80043b4:	ffbfffff 	.word	0xffbfffff
 80043b8:	feffffff 	.word	0xfeffffff

080043bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e04a      	b.n	8004464 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	223d      	movs	r2, #61	@ 0x3d
 80043d2:	5c9b      	ldrb	r3, [r3, r2]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	223c      	movs	r2, #60	@ 0x3c
 80043de:	2100      	movs	r1, #0
 80043e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7fd f831 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	223d      	movs	r2, #61	@ 0x3d
 80043ee:	2102      	movs	r1, #2
 80043f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f000 fb5b 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2248      	movs	r2, #72	@ 0x48
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223e      	movs	r2, #62	@ 0x3e
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223f      	movs	r2, #63	@ 0x3f
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2240      	movs	r2, #64	@ 0x40
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2241      	movs	r2, #65	@ 0x41
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2242      	movs	r2, #66	@ 0x42
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2243      	movs	r2, #67	@ 0x43
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2244      	movs	r2, #68	@ 0x44
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2245      	movs	r2, #69	@ 0x45
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2246      	movs	r2, #70	@ 0x46
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2247      	movs	r2, #71	@ 0x47
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	223d      	movs	r2, #61	@ 0x3d
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b002      	add	sp, #8
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e04a      	b.n	8004514 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	223d      	movs	r2, #61	@ 0x3d
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	223c      	movs	r2, #60	@ 0x3c
 800448e:	2100      	movs	r1, #0
 8004490:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f000 f841 	bl	800451c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	223d      	movs	r2, #61	@ 0x3d
 800449e:	2102      	movs	r1, #2
 80044a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	0019      	movs	r1, r3
 80044ac:	0010      	movs	r0, r2
 80044ae:	f000 fb03 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2248      	movs	r2, #72	@ 0x48
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	223e      	movs	r2, #62	@ 0x3e
 80044be:	2101      	movs	r1, #1
 80044c0:	5499      	strb	r1, [r3, r2]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	223f      	movs	r2, #63	@ 0x3f
 80044c6:	2101      	movs	r1, #1
 80044c8:	5499      	strb	r1, [r3, r2]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2240      	movs	r2, #64	@ 0x40
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2241      	movs	r2, #65	@ 0x41
 80044d6:	2101      	movs	r1, #1
 80044d8:	5499      	strb	r1, [r3, r2]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2242      	movs	r2, #66	@ 0x42
 80044de:	2101      	movs	r1, #1
 80044e0:	5499      	strb	r1, [r3, r2]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2243      	movs	r2, #67	@ 0x43
 80044e6:	2101      	movs	r1, #1
 80044e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2244      	movs	r2, #68	@ 0x44
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2245      	movs	r2, #69	@ 0x45
 80044f6:	2101      	movs	r1, #1
 80044f8:	5499      	strb	r1, [r3, r2]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2246      	movs	r2, #70	@ 0x46
 80044fe:	2101      	movs	r1, #1
 8004500:	5499      	strb	r1, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2247      	movs	r2, #71	@ 0x47
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	223d      	movs	r2, #61	@ 0x3d
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b002      	add	sp, #8
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <HAL_TIM_PWM_Start+0x22>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	223e      	movs	r2, #62	@ 0x3e
 8004540:	5c9b      	ldrb	r3, [r3, r2]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	1e5a      	subs	r2, r3, #1
 8004548:	4193      	sbcs	r3, r2
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e037      	b.n	80045be <HAL_TIM_PWM_Start+0x92>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d108      	bne.n	8004566 <HAL_TIM_PWM_Start+0x3a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	223f      	movs	r2, #63	@ 0x3f
 8004558:	5c9b      	ldrb	r3, [r3, r2]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	4193      	sbcs	r3, r2
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e02b      	b.n	80045be <HAL_TIM_PWM_Start+0x92>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d108      	bne.n	800457e <HAL_TIM_PWM_Start+0x52>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2240      	movs	r2, #64	@ 0x40
 8004570:	5c9b      	ldrb	r3, [r3, r2]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	1e5a      	subs	r2, r3, #1
 8004578:	4193      	sbcs	r3, r2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e01f      	b.n	80045be <HAL_TIM_PWM_Start+0x92>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d108      	bne.n	8004596 <HAL_TIM_PWM_Start+0x6a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2241      	movs	r2, #65	@ 0x41
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	1e5a      	subs	r2, r3, #1
 8004590:	4193      	sbcs	r3, r2
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e013      	b.n	80045be <HAL_TIM_PWM_Start+0x92>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b10      	cmp	r3, #16
 800459a:	d108      	bne.n	80045ae <HAL_TIM_PWM_Start+0x82>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2242      	movs	r2, #66	@ 0x42
 80045a0:	5c9b      	ldrb	r3, [r3, r2]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	4193      	sbcs	r3, r2
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e007      	b.n	80045be <HAL_TIM_PWM_Start+0x92>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2243      	movs	r2, #67	@ 0x43
 80045b2:	5c9b      	ldrb	r3, [r3, r2]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	4193      	sbcs	r3, r2
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e090      	b.n	80046e8 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Start+0xaa>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	223e      	movs	r2, #62	@ 0x3e
 80045d0:	2102      	movs	r1, #2
 80045d2:	5499      	strb	r1, [r3, r2]
 80045d4:	e023      	b.n	800461e <HAL_TIM_PWM_Start+0xf2>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_PWM_Start+0xba>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	223f      	movs	r2, #63	@ 0x3f
 80045e0:	2102      	movs	r1, #2
 80045e2:	5499      	strb	r1, [r3, r2]
 80045e4:	e01b      	b.n	800461e <HAL_TIM_PWM_Start+0xf2>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_PWM_Start+0xca>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2240      	movs	r2, #64	@ 0x40
 80045f0:	2102      	movs	r1, #2
 80045f2:	5499      	strb	r1, [r3, r2]
 80045f4:	e013      	b.n	800461e <HAL_TIM_PWM_Start+0xf2>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_PWM_Start+0xda>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2241      	movs	r2, #65	@ 0x41
 8004600:	2102      	movs	r1, #2
 8004602:	5499      	strb	r1, [r3, r2]
 8004604:	e00b      	b.n	800461e <HAL_TIM_PWM_Start+0xf2>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b10      	cmp	r3, #16
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_Start+0xea>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2242      	movs	r2, #66	@ 0x42
 8004610:	2102      	movs	r1, #2
 8004612:	5499      	strb	r1, [r3, r2]
 8004614:	e003      	b.n	800461e <HAL_TIM_PWM_Start+0xf2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2243      	movs	r2, #67	@ 0x43
 800461a:	2102      	movs	r1, #2
 800461c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	2201      	movs	r2, #1
 8004626:	0018      	movs	r0, r3
 8004628:	f000 fe3e 	bl	80052a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2f      	ldr	r2, [pc, #188]	@ (80046f0 <HAL_TIM_PWM_Start+0x1c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_PWM_Start+0x128>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2e      	ldr	r2, [pc, #184]	@ (80046f4 <HAL_TIM_PWM_Start+0x1c8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_PWM_Start+0x128>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2c      	ldr	r2, [pc, #176]	@ (80046f8 <HAL_TIM_PWM_Start+0x1cc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_PWM_Start+0x128>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2b      	ldr	r2, [pc, #172]	@ (80046fc <HAL_TIM_PWM_Start+0x1d0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_TIM_PWM_Start+0x12c>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_TIM_PWM_Start+0x12e>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2180      	movs	r1, #128	@ 0x80
 800466a:	0209      	lsls	r1, r1, #8
 800466c:	430a      	orrs	r2, r1
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1e      	ldr	r2, [pc, #120]	@ (80046f0 <HAL_TIM_PWM_Start+0x1c4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d014      	beq.n	80046a4 <HAL_TIM_PWM_Start+0x178>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	05db      	lsls	r3, r3, #23
 8004682:	429a      	cmp	r2, r3
 8004684:	d00e      	beq.n	80046a4 <HAL_TIM_PWM_Start+0x178>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1d      	ldr	r2, [pc, #116]	@ (8004700 <HAL_TIM_PWM_Start+0x1d4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_TIM_PWM_Start+0x178>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <HAL_TIM_PWM_Start+0x1d8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <HAL_TIM_PWM_Start+0x178>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <HAL_TIM_PWM_Start+0x1c8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d116      	bne.n	80046d2 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <HAL_TIM_PWM_Start+0x1dc>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d016      	beq.n	80046e4 <HAL_TIM_PWM_Start+0x1b8>
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	025b      	lsls	r3, r3, #9
 80046bc:	429a      	cmp	r2, r3
 80046be:	d011      	beq.n	80046e4 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	e008      	b.n	80046e4 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	0018      	movs	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b004      	add	sp, #16
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	00010007 	.word	0x00010007

0800470c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2317      	movs	r3, #23
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	223c      	movs	r2, #60	@ 0x3c
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_TIM_PWM_ConfigChannel+0x22>
 800472a:	2302      	movs	r3, #2
 800472c:	e0e5      	b.n	80048fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	223c      	movs	r2, #60	@ 0x3c
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b14      	cmp	r3, #20
 800473a:	d900      	bls.n	800473e <HAL_TIM_PWM_ConfigChannel+0x32>
 800473c:	e0d1      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	009a      	lsls	r2, r3, #2
 8004742:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004744:	18d3      	adds	r3, r2, r3
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0011      	movs	r1, r2
 8004752:	0018      	movs	r0, r3
 8004754:	f000 fa48 	bl	8004be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2108      	movs	r1, #8
 8004764:	430a      	orrs	r2, r1
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2104      	movs	r1, #4
 8004774:	438a      	bics	r2, r1
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	619a      	str	r2, [r3, #24]
      break;
 800478a:	e0af      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	0011      	movs	r1, r2
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fab1 	bl	8004cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2180      	movs	r1, #128	@ 0x80
 80047a6:	0109      	lsls	r1, r1, #4
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4954      	ldr	r1, [pc, #336]	@ (8004908 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047b8:	400a      	ands	r2, r1
 80047ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
      break;
 80047d0:	e08c      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	0011      	movs	r1, r2
 80047da:	0018      	movs	r0, r3
 80047dc:	f000 fb12 	bl	8004e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2108      	movs	r1, #8
 80047ec:	430a      	orrs	r2, r1
 80047ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2104      	movs	r1, #4
 80047fc:	438a      	bics	r2, r1
 80047fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69d9      	ldr	r1, [r3, #28]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	61da      	str	r2, [r3, #28]
      break;
 8004812:	e06b      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	0011      	movs	r1, r2
 800481c:	0018      	movs	r0, r3
 800481e:	f000 fb79 	bl	8004f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2180      	movs	r1, #128	@ 0x80
 800482e:	0109      	lsls	r1, r1, #4
 8004830:	430a      	orrs	r2, r1
 8004832:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4932      	ldr	r1, [pc, #200]	@ (8004908 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004840:	400a      	ands	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69d9      	ldr	r1, [r3, #28]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	61da      	str	r2, [r3, #28]
      break;
 8004858:	e048      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0011      	movs	r1, r2
 8004862:	0018      	movs	r0, r3
 8004864:	f000 fbc0 	bl	8004fe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2108      	movs	r1, #8
 8004874:	430a      	orrs	r2, r1
 8004876:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2104      	movs	r1, #4
 8004884:	438a      	bics	r2, r1
 8004886:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800489a:	e027      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	0011      	movs	r1, r2
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 fbff 	bl	80050a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2180      	movs	r1, #128	@ 0x80
 80048b6:	0109      	lsls	r1, r1, #4
 80048b8:	430a      	orrs	r2, r1
 80048ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4910      	ldr	r1, [pc, #64]	@ (8004908 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	021a      	lsls	r2, r3, #8
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048e0:	e004      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80048e2:	2317      	movs	r3, #23
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
      break;
 80048ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	223c      	movs	r2, #60	@ 0x3c
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

  return status;
 80048f4:	2317      	movs	r3, #23
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	781b      	ldrb	r3, [r3, #0]
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b006      	add	sp, #24
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	08005610 	.word	0x08005610
 8004908:	fffffbff 	.word	0xfffffbff

0800490c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	230f      	movs	r3, #15
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	223c      	movs	r2, #60	@ 0x3c
 8004922:	5c9b      	ldrb	r3, [r3, r2]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIM_ConfigClockSource+0x20>
 8004928:	2302      	movs	r3, #2
 800492a:	e0bc      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x19a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	223c      	movs	r2, #60	@ 0x3c
 8004930:	2101      	movs	r1, #1
 8004932:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	223d      	movs	r2, #61	@ 0x3d
 8004938:	2102      	movs	r1, #2
 800493a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a5a      	ldr	r2, [pc, #360]	@ (8004ab0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004948:	4013      	ands	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a59      	ldr	r2, [pc, #356]	@ (8004ab4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004950:	4013      	ands	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	0192      	lsls	r2, r2, #6
 8004964:	4293      	cmp	r3, r2
 8004966:	d040      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xde>
 8004968:	2280      	movs	r2, #128	@ 0x80
 800496a:	0192      	lsls	r2, r2, #6
 800496c:	4293      	cmp	r3, r2
 800496e:	d900      	bls.n	8004972 <HAL_TIM_ConfigClockSource+0x66>
 8004970:	e088      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 8004972:	2280      	movs	r2, #128	@ 0x80
 8004974:	0152      	lsls	r2, r2, #5
 8004976:	4293      	cmp	r3, r2
 8004978:	d100      	bne.n	800497c <HAL_TIM_ConfigClockSource+0x70>
 800497a:	e088      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x182>
 800497c:	2280      	movs	r2, #128	@ 0x80
 800497e:	0152      	lsls	r2, r2, #5
 8004980:	4293      	cmp	r3, r2
 8004982:	d900      	bls.n	8004986 <HAL_TIM_ConfigClockSource+0x7a>
 8004984:	e07e      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 8004986:	2b70      	cmp	r3, #112	@ 0x70
 8004988:	d018      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0xb0>
 800498a:	d900      	bls.n	800498e <HAL_TIM_ConfigClockSource+0x82>
 800498c:	e07a      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 800498e:	2b60      	cmp	r3, #96	@ 0x60
 8004990:	d04f      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x126>
 8004992:	d900      	bls.n	8004996 <HAL_TIM_ConfigClockSource+0x8a>
 8004994:	e076      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 8004996:	2b50      	cmp	r3, #80	@ 0x50
 8004998:	d03b      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x106>
 800499a:	d900      	bls.n	800499e <HAL_TIM_ConfigClockSource+0x92>
 800499c:	e072      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 800499e:	2b40      	cmp	r3, #64	@ 0x40
 80049a0:	d057      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x146>
 80049a2:	d900      	bls.n	80049a6 <HAL_TIM_ConfigClockSource+0x9a>
 80049a4:	e06e      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 80049a6:	2b30      	cmp	r3, #48	@ 0x30
 80049a8:	d063      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x166>
 80049aa:	d86b      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d060      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x166>
 80049b0:	d868      	bhi.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d05d      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x166>
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d05b      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x166>
 80049ba:	e063      	b.n	8004a84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049cc:	f000 fc4c 	bl	8005268 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2277      	movs	r2, #119	@ 0x77
 80049dc:	4313      	orrs	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
      break;
 80049e8:	e052      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049fa:	f000 fc35 	bl	8005268 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2180      	movs	r1, #128	@ 0x80
 8004a0a:	01c9      	lsls	r1, r1, #7
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
      break;
 8004a10:	e03e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	001a      	movs	r2, r3
 8004a20:	f000 fba6 	bl	8005170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2150      	movs	r1, #80	@ 0x50
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fc00 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004a30:	e02e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3e:	001a      	movs	r2, r3
 8004a40:	f000 fbc4 	bl	80051cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2160      	movs	r1, #96	@ 0x60
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 fbf0 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004a50:	e01e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5e:	001a      	movs	r2, r3
 8004a60:	f000 fb86 	bl	8005170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2140      	movs	r1, #64	@ 0x40
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fbe0 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004a70:	e00e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	0010      	movs	r0, r2
 8004a7e:	f000 fbd7 	bl	8005230 <TIM_ITRx_SetConfig>
      break;
 8004a82:	e005      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a84:	230f      	movs	r3, #15
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
      break;
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a8e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	223d      	movs	r2, #61	@ 0x3d
 8004a94:	2101      	movs	r1, #1
 8004a96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	223c      	movs	r2, #60	@ 0x3c
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]

  return status;
 8004aa0:	230f      	movs	r3, #15
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	ffceff88 	.word	0xffceff88
 8004ab4:	ffff00ff 	.word	0xffff00ff

08004ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3f      	ldr	r2, [pc, #252]	@ (8004bc8 <TIM_Base_SetConfig+0x110>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00c      	beq.n	8004aea <TIM_Base_SetConfig+0x32>
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	05db      	lsls	r3, r3, #23
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d007      	beq.n	8004aea <TIM_Base_SetConfig+0x32>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a3b      	ldr	r2, [pc, #236]	@ (8004bcc <TIM_Base_SetConfig+0x114>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_Base_SetConfig+0x32>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2270      	movs	r2, #112	@ 0x70
 8004aee:	4393      	bics	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a32      	ldr	r2, [pc, #200]	@ (8004bc8 <TIM_Base_SetConfig+0x110>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01c      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	05db      	lsls	r3, r3, #23
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d017      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2e      	ldr	r2, [pc, #184]	@ (8004bcc <TIM_Base_SetConfig+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00f      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd8 <TIM_Base_SetConfig+0x120>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	@ (8004bdc <TIM_Base_SetConfig+0x124>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x86>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a29      	ldr	r2, [pc, #164]	@ (8004be0 <TIM_Base_SetConfig+0x128>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a28      	ldr	r2, [pc, #160]	@ (8004be4 <TIM_Base_SetConfig+0x12c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	4393      	bics	r3, r2
 8004b56:	001a      	movs	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a13      	ldr	r2, [pc, #76]	@ (8004bc8 <TIM_Base_SetConfig+0x110>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_Base_SetConfig+0xde>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a15      	ldr	r2, [pc, #84]	@ (8004bd8 <TIM_Base_SetConfig+0x120>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <TIM_Base_SetConfig+0xde>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <TIM_Base_SetConfig+0x124>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_Base_SetConfig+0xde>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a13      	ldr	r2, [pc, #76]	@ (8004be0 <TIM_Base_SetConfig+0x128>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d103      	bne.n	8004b9e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	001a      	movs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
  }
}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b004      	add	sp, #16
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40002000 	.word	0x40002000
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	fffffcff 	.word	0xfffffcff

08004be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4393      	bics	r3, r2
 8004c00:	001a      	movs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a32      	ldr	r2, [pc, #200]	@ (8004ce0 <TIM_OC1_SetConfig+0xf8>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	4393      	bics	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	4393      	bics	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a28      	ldr	r2, [pc, #160]	@ (8004ce4 <TIM_OC1_SetConfig+0xfc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_OC1_SetConfig+0x76>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a27      	ldr	r2, [pc, #156]	@ (8004ce8 <TIM_OC1_SetConfig+0x100>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_OC1_SetConfig+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a26      	ldr	r2, [pc, #152]	@ (8004cec <TIM_OC1_SetConfig+0x104>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_OC1_SetConfig+0x76>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a25      	ldr	r2, [pc, #148]	@ (8004cf0 <TIM_OC1_SetConfig+0x108>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10c      	bne.n	8004c78 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4393      	bics	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2204      	movs	r2, #4
 8004c74:	4393      	bics	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce4 <TIM_OC1_SetConfig+0xfc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_OC1_SetConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <TIM_OC1_SetConfig+0x100>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_OC1_SetConfig+0xb0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <TIM_OC1_SetConfig+0x104>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC1_SetConfig+0xb0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a17      	ldr	r2, [pc, #92]	@ (8004cf0 <TIM_OC1_SetConfig+0x108>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d111      	bne.n	8004cbc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <TIM_OC1_SetConfig+0x10c>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <TIM_OC1_SetConfig+0x110>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b006      	add	sp, #24
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	fffeff8f 	.word	0xfffeff8f
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	40014800 	.word	0x40014800
 8004cf4:	fffffeff 	.word	0xfffffeff
 8004cf8:	fffffdff 	.word	0xfffffdff

08004cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	2210      	movs	r2, #16
 8004d12:	4393      	bics	r3, r2
 8004d14:	001a      	movs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a2e      	ldr	r2, [pc, #184]	@ (8004de4 <TIM_OC2_SetConfig+0xe8>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <TIM_OC2_SetConfig+0xec>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2220      	movs	r2, #32
 8004d46:	4393      	bics	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a24      	ldr	r2, [pc, #144]	@ (8004dec <TIM_OC2_SetConfig+0xf0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10d      	bne.n	8004d7a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2280      	movs	r2, #128	@ 0x80
 8004d62:	4393      	bics	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2240      	movs	r2, #64	@ 0x40
 8004d76:	4393      	bics	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <TIM_OC2_SetConfig+0xf0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_OC2_SetConfig+0x9e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	@ (8004df0 <TIM_OC2_SetConfig+0xf4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_OC2_SetConfig+0x9e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	@ (8004df4 <TIM_OC2_SetConfig+0xf8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_OC2_SetConfig+0x9e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a18      	ldr	r2, [pc, #96]	@ (8004df8 <TIM_OC2_SetConfig+0xfc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d113      	bne.n	8004dc2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <TIM_OC2_SetConfig+0x100>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4a16      	ldr	r2, [pc, #88]	@ (8004e00 <TIM_OC2_SetConfig+0x104>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b006      	add	sp, #24
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	feff8fff 	.word	0xfeff8fff
 8004de8:	fffffcff 	.word	0xfffffcff
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	fffffbff 	.word	0xfffffbff
 8004e00:	fffff7ff 	.word	0xfffff7ff

08004e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4a33      	ldr	r2, [pc, #204]	@ (8004ee8 <TIM_OC3_SetConfig+0xe4>)
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <TIM_OC3_SetConfig+0xe8>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2203      	movs	r2, #3
 8004e38:	4393      	bics	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4a29      	ldr	r2, [pc, #164]	@ (8004ef0 <TIM_OC3_SetConfig+0xec>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	@ (8004ef4 <TIM_OC3_SetConfig+0xf0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d10d      	bne.n	8004e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4a24      	ldr	r2, [pc, #144]	@ (8004ef8 <TIM_OC3_SetConfig+0xf4>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4a20      	ldr	r2, [pc, #128]	@ (8004efc <TIM_OC3_SetConfig+0xf8>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <TIM_OC3_SetConfig+0xf0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_OC3_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <TIM_OC3_SetConfig+0xfc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_OC3_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <TIM_OC3_SetConfig+0x100>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC3_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <TIM_OC3_SetConfig+0x104>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d113      	bne.n	8004ec6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f0c <TIM_OC3_SetConfig+0x108>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <TIM_OC3_SetConfig+0x10c>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b006      	add	sp, #24
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	fffffeff 	.word	0xfffffeff
 8004eec:	fffeff8f 	.word	0xfffeff8f
 8004ef0:	fffffdff 	.word	0xfffffdff
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	fffff7ff 	.word	0xfffff7ff
 8004efc:	fffffbff 	.word	0xfffffbff
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	ffffefff 	.word	0xffffefff
 8004f10:	ffffdfff 	.word	0xffffdfff

08004f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4a26      	ldr	r2, [pc, #152]	@ (8004fc4 <TIM_OC4_SetConfig+0xb0>)
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a22      	ldr	r2, [pc, #136]	@ (8004fc8 <TIM_OC4_SetConfig+0xb4>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <TIM_OC4_SetConfig+0xb8>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <TIM_OC4_SetConfig+0xbc>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	031b      	lsls	r3, r3, #12
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a19      	ldr	r2, [pc, #100]	@ (8004fd4 <TIM_OC4_SetConfig+0xc0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <TIM_OC4_SetConfig+0x78>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <TIM_OC4_SetConfig+0xc4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_OC4_SetConfig+0x78>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <TIM_OC4_SetConfig+0xc8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC4_SetConfig+0x78>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <TIM_OC4_SetConfig+0xcc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d109      	bne.n	8004fa0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <TIM_OC4_SetConfig+0xd0>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b006      	add	sp, #24
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	ffffefff 	.word	0xffffefff
 8004fc8:	feff8fff 	.word	0xfeff8fff
 8004fcc:	fffffcff 	.word	0xfffffcff
 8004fd0:	ffffdfff 	.word	0xffffdfff
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800
 8004fe4:	ffffbfff 	.word	0xffffbfff

08004fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	@ (800508c <TIM_OC5_SetConfig+0xa4>)
 8004ffe:	401a      	ands	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a1f      	ldr	r2, [pc, #124]	@ (8005090 <TIM_OC5_SetConfig+0xa8>)
 8005014:	4013      	ands	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4a1b      	ldr	r2, [pc, #108]	@ (8005094 <TIM_OC5_SetConfig+0xac>)
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a17      	ldr	r2, [pc, #92]	@ (8005098 <TIM_OC5_SetConfig+0xb0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_OC5_SetConfig+0x6e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a16      	ldr	r2, [pc, #88]	@ (800509c <TIM_OC5_SetConfig+0xb4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC5_SetConfig+0x6e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <TIM_OC5_SetConfig+0xb8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC5_SetConfig+0x6e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a14      	ldr	r2, [pc, #80]	@ (80050a4 <TIM_OC5_SetConfig+0xbc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d109      	bne.n	800506a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4a0c      	ldr	r2, [pc, #48]	@ (800508c <TIM_OC5_SetConfig+0xa4>)
 800505a:	4013      	ands	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	46c0      	nop			@ (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b006      	add	sp, #24
 800508a:	bd80      	pop	{r7, pc}
 800508c:	fffeffff 	.word	0xfffeffff
 8005090:	fffeff8f 	.word	0xfffeff8f
 8005094:	fffdffff 	.word	0xfffdffff
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	4a24      	ldr	r2, [pc, #144]	@ (8005150 <TIM_OC6_SetConfig+0xa8>)
 80050be:	401a      	ands	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a20      	ldr	r2, [pc, #128]	@ (8005154 <TIM_OC6_SetConfig+0xac>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <TIM_OC6_SetConfig+0xb0>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	051b      	lsls	r3, r3, #20
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a18      	ldr	r2, [pc, #96]	@ (800515c <TIM_OC6_SetConfig+0xb4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_OC6_SetConfig+0x70>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <TIM_OC6_SetConfig+0xb8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_OC6_SetConfig+0x70>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <TIM_OC6_SetConfig+0xbc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_OC6_SetConfig+0x70>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a15      	ldr	r2, [pc, #84]	@ (8005168 <TIM_OC6_SetConfig+0xc0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d109      	bne.n	800512c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4a14      	ldr	r2, [pc, #80]	@ (800516c <TIM_OC6_SetConfig+0xc4>)
 800511c:	4013      	ands	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b006      	add	sp, #24
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	ffefffff 	.word	0xffefffff
 8005154:	feff8fff 	.word	0xfeff8fff
 8005158:	ffdfffff 	.word	0xffdfffff
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800
 800516c:	fffbffff 	.word	0xfffbffff

08005170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	2201      	movs	r2, #1
 8005188:	4393      	bics	r3, r2
 800518a:	001a      	movs	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	22f0      	movs	r2, #240	@ 0xf0
 800519a:	4393      	bics	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	220a      	movs	r2, #10
 80051ac:	4393      	bics	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	46bd      	mov	sp, r7
 80051c8:	b006      	add	sp, #24
 80051ca:	bd80      	pop	{r7, pc}

080051cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	2210      	movs	r2, #16
 80051e4:	4393      	bics	r3, r2
 80051e6:	001a      	movs	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4a0d      	ldr	r2, [pc, #52]	@ (800522c <TIM_TI2_ConfigInputStage+0x60>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	031b      	lsls	r3, r3, #12
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	22a0      	movs	r2, #160	@ 0xa0
 8005208:	4393      	bics	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b006      	add	sp, #24
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	ffff0fff 	.word	0xffff0fff

08005230 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a08      	ldr	r2, [pc, #32]	@ (8005264 <TIM_ITRx_SetConfig+0x34>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	2207      	movs	r2, #7
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b004      	add	sp, #16
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	ffcfff8f 	.word	0xffcfff8f

08005268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4a09      	ldr	r2, [pc, #36]	@ (80052a4 <TIM_ETR_SetConfig+0x3c>)
 8005280:	4013      	ands	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	431a      	orrs	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b006      	add	sp, #24
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	ffff00ff 	.word	0xffff00ff

080052a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	221f      	movs	r2, #31
 80052b8:	4013      	ands	r3, r2
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	0013      	movs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	43d2      	mvns	r2, r2
 80052ca:	401a      	ands	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	211f      	movs	r1, #31
 80052d8:	400b      	ands	r3, r1
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4099      	lsls	r1, r3
 80052de:	000b      	movs	r3, r1
 80052e0:	431a      	orrs	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b006      	add	sp, #24
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	223c      	movs	r2, #60	@ 0x3c
 80052fe:	5c9b      	ldrb	r3, [r3, r2]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005304:	2302      	movs	r3, #2
 8005306:	e05a      	b.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	223c      	movs	r2, #60	@ 0x3c
 800530c:	2101      	movs	r1, #1
 800530e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	223d      	movs	r2, #61	@ 0x3d
 8005314:	2102      	movs	r1, #2
 8005316:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a26      	ldr	r2, [pc, #152]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005336:	4013      	ands	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2270      	movs	r2, #112	@ 0x70
 8005348:	4393      	bics	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a19      	ldr	r2, [pc, #100]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d014      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	05db      	lsls	r3, r3, #23
 8005370:	429a      	cmp	r2, r3
 8005372:	d00e      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a15      	ldr	r2, [pc, #84]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a14      	ldr	r2, [pc, #80]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10c      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2280      	movs	r2, #128	@ 0x80
 8005396:	4393      	bics	r3, r2
 8005398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	223d      	movs	r2, #61	@ 0x3d
 80053b0:	2101      	movs	r1, #1
 80053b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	223c      	movs	r2, #60	@ 0x3c
 80053b8:	2100      	movs	r1, #0
 80053ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	ff0fffff 	.word	0xff0fffff
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40014000 	.word	0x40014000

080053dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	223c      	movs	r2, #60	@ 0x3c
 80053ee:	5c9b      	ldrb	r3, [r3, r2]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e06f      	b.n	80054d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	223c      	movs	r2, #60	@ 0x3c
 80053fc:	2101      	movs	r1, #1
 80053fe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	4393      	bics	r3, r2
 8005406:	001a      	movs	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005414:	401a      	ands	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a30      	ldr	r2, [pc, #192]	@ (80054e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005422:	401a      	ands	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a2e      	ldr	r2, [pc, #184]	@ (80054e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005430:	401a      	ands	r2, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a2b      	ldr	r2, [pc, #172]	@ (80054ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800543e:	401a      	ands	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a29      	ldr	r2, [pc, #164]	@ (80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800544c:	401a      	ands	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a26      	ldr	r2, [pc, #152]	@ (80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800545a:	401a      	ands	r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a24      	ldr	r2, [pc, #144]	@ (80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005468:	401a      	ands	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a21      	ldr	r2, [pc, #132]	@ (80054fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005478:	401a      	ands	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1e      	ldr	r2, [pc, #120]	@ (8005500 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d11c      	bne.n	80054c6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a1d      	ldr	r2, [pc, #116]	@ (8005504 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005490:	401a      	ands	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	051b      	lsls	r3, r3, #20
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a1a      	ldr	r2, [pc, #104]	@ (8005508 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80054a0:	401a      	ands	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a17      	ldr	r2, [pc, #92]	@ (800550c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80054ae:	401a      	ands	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80054bc:	401a      	ands	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223c      	movs	r2, #60	@ 0x3c
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b004      	add	sp, #16
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	fffffcff 	.word	0xfffffcff
 80054e4:	fffffbff 	.word	0xfffffbff
 80054e8:	fffff7ff 	.word	0xfffff7ff
 80054ec:	ffffefff 	.word	0xffffefff
 80054f0:	ffffdfff 	.word	0xffffdfff
 80054f4:	ffffbfff 	.word	0xffffbfff
 80054f8:	fff0ffff 	.word	0xfff0ffff
 80054fc:	efffffff 	.word	0xefffffff
 8005500:	40012c00 	.word	0x40012c00
 8005504:	ff0fffff 	.word	0xff0fffff
 8005508:	feffffff 	.word	0xfeffffff
 800550c:	fdffffff 	.word	0xfdffffff
 8005510:	dfffffff 	.word	0xdfffffff

08005514 <memset>:
 8005514:	0003      	movs	r3, r0
 8005516:	1882      	adds	r2, r0, r2
 8005518:	4293      	cmp	r3, r2
 800551a:	d100      	bne.n	800551e <memset+0xa>
 800551c:	4770      	bx	lr
 800551e:	7019      	strb	r1, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	e7f9      	b.n	8005518 <memset+0x4>

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	2600      	movs	r6, #0
 8005528:	4c0c      	ldr	r4, [pc, #48]	@ (800555c <__libc_init_array+0x38>)
 800552a:	4d0d      	ldr	r5, [pc, #52]	@ (8005560 <__libc_init_array+0x3c>)
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	42a6      	cmp	r6, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	2600      	movs	r6, #0
 8005536:	f000 f819 	bl	800556c <_init>
 800553a:	4c0a      	ldr	r4, [pc, #40]	@ (8005564 <__libc_init_array+0x40>)
 800553c:	4d0a      	ldr	r5, [pc, #40]	@ (8005568 <__libc_init_array+0x44>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	42a6      	cmp	r6, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	00b3      	lsls	r3, r6, #2
 800554a:	58eb      	ldr	r3, [r5, r3]
 800554c:	4798      	blx	r3
 800554e:	3601      	adds	r6, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	00b3      	lsls	r3, r6, #2
 8005554:	58eb      	ldr	r3, [r5, r3]
 8005556:	4798      	blx	r3
 8005558:	3601      	adds	r6, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	08005664 	.word	0x08005664
 8005560:	08005664 	.word	0x08005664
 8005564:	08005668 	.word	0x08005668
 8005568:	08005664 	.word	0x08005664

0800556c <_init>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr

08005578 <_fini>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr
